<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Drive API テスト - RentPipe</title>
    <style>
        body { 
            font-family: sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px; 
            background: #f5f5f5;
        }
        .test-section { 
            margin: 20px 0; 
            padding: 20px; 
            border: 1px solid #ddd; 
            border-radius: 8px; 
            background: white;
        }
        .success { 
            background: #d4edda; 
            border-color: #c3e6cb; 
        }
        .error { 
            background: #f8d7da; 
            border-color: #f5c6cb; 
        }
        .warning {
            background: #fff3cd;
            border-color: #ffeaa7;
        }
        button { 
            padding: 10px 20px; 
            margin: 5px; 
            background: #007bff; 
            color: white; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
        }
        button:hover { 
            background: #0056b3; 
        }
        button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        pre { 
            background: #f8f9fa; 
            padding: 10px; 
            border-radius: 5px; 
            overflow-x: auto; 
        }
        .auth-status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .auth-success { background: #d4edda; color: #155724; }
        .auth-error { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <h1>🧪 Google Drive API テスト</h1>
    <p><strong>新機能:</strong> 統合認証システム + Google Drive API連携</p>
    
    <div class="test-section">
        <h2>📊 認証状態確認</h2>
        <div id="auth-status-display"></div>
        <button onclick="checkAuthStatus()" id="checkAuthBtn">認証状態チェック</button>
        <div id="auth-result"></div>
    </div>
    
    <div class="test-section">
        <h2>🔧 Google Drive API初期化</h2>
        <button onclick="initializeDriveAPI()" id="driveInitBtn" disabled>Drive API初期化</button>
        <div id="drive-init-result"></div>
    </div>
    
    <div class="test-section">
        <h2>📁 RentPipeフォルダー作成</h2>
        <button onclick="createRentPipeFolder()" id="folderBtn" disabled>フォルダー作成</button>
        <div id="folder-result"></div>
    </div>
    
    <div class="test-section">
        <h2>📊 CSV変換テスト</h2>
        <button onclick="testCSVConversion()" id="csvBtn">CSV変換テスト</button>
        <div id="csv-result"></div>
    </div>

    <div class="test-section warning">
        <h3>⚠️ 未認証の場合</h3>
        <p>Google Drive API機能を使用するには、Google認証が必要です。</p>
        <a href="login.html" class="button" style="background: #28a745; text-decoration: none; color: white; display: inline-block; padding: 10px 20px; border-radius: 5px;">ログイン画面へ</a>
    </div>

    <!-- Google Drive API SDK -->
    <script src="https://apis.google.com/js/api.js"></script>
    
    <script>
        // 認証状態管理
        let isAuthenticated = false;
        let currentUser = null;
        let driveAPIReady = false;
        
        // 結果表示用関数
        function log(elementId, message, type = 'info') {
            const element = document.getElementById(elementId);
            const className = type === 'success' ? 'success' : type === 'error' ? 'error' : type === 'warning' ? 'warning' : '';
            element.innerHTML = `<div class="${className}"><pre>${message}</pre></div>`;
        }
        
        // 認証状態確認
        function checkAuthStatus() {
            console.log('🔍 認証状態確認開始');
            
            try {
                // LocalStorage認証データ確認
                const authSimple = localStorage.getItem('rentpipe_auth_simple');
                const userSimple = localStorage.getItem('rentpipe_user_simple');
                const tempAuth = localStorage.getItem('rentpipe_temp_auth');
                const userInfo = localStorage.getItem('rentpipe_user_info');
                
                console.log('🔍 認証データ確認:', {
                    authSimple, tempAuth,
                    hasUserSimple: !!userSimple,
                    hasUserInfo: !!userInfo
                });
                
                if (authSimple === 'logged_in' && userSimple) {
                    try {
                        currentUser = JSON.parse(userSimple);
                        isAuthenticated = true;
                        
                        const statusHtml = `✅ 認証済み
ユーザー: ${currentUser.email}
名前: ${currentUser.name || '未設定'}
認証方式: simple-reliable-auth`;
                        
                        log('auth-result', statusHtml, 'success');
                        
                        // 認証状態表示更新
                        updateAuthStatusDisplay(true);
                        
                        // ボタンを有効化
                        document.getElementById('driveInitBtn').disabled = false;
                        
                        console.log('✅ 認証確認完了:', currentUser.email);
                        
                    } catch (parseError) {
                        console.error('❌ ユーザーデータパースエラー:', parseError);
                        log('auth-result', '❌ 認証データの解析に失敗しました', 'error');
                        updateAuthStatusDisplay(false);
                    }
                    
                } else if (tempAuth === 'google_authenticated' && userInfo) {
                    try {
                        const fullUserData = JSON.parse(userInfo);
                        currentUser = {
                            email: fullUserData.email,
                            name: fullUserData.displayName,
                            picture: fullUserData.photoURL
                        };
                        isAuthenticated = true;
                        
                        const statusHtml = `✅ 認証済み（Google）
ユーザー: ${currentUser.email}
名前: ${currentUser.name || '未設定'}
認証方式: google-integrated-auth`;
                        
                        log('auth-result', statusHtml, 'success');
                        updateAuthStatusDisplay(true);
                        document.getElementById('driveInitBtn').disabled = false;
                        
                        console.log('✅ Google認証確認完了:', currentUser.email);
                        
                    } catch (parseError) {
                        console.error('❌ Google認証データパースエラー:', parseError);
                        log('auth-result', '❌ Google認証データの解析に失敗しました', 'error');
                        updateAuthStatusDisplay(false);
                    }
                    
                } else {
                    // 未認証状態
                    isAuthenticated = false;
                    currentUser = null;
                    
                    log('auth-result', `❌ 未認証状態

Google Drive API機能を使用するには、ログインが必要です。
下記のボタンからログインしてください。`, 'error');
                    
                    updateAuthStatusDisplay(false);
                    
                    // ボタンを無効化
                    document.getElementById('driveInitBtn').disabled = true;
                    document.getElementById('folderBtn').disabled = true;
                    
                    console.log('❌ 未認証状態');
                }
                
            } catch (error) {
                console.error('❌ 認証状態確認エラー:', error);
                log('auth-result', `❌ 認証状態確認エラー: ${error.message}`, 'error');
                updateAuthStatusDisplay(false);
            }
        }
        
        // 認証状態表示更新
        function updateAuthStatusDisplay(authenticated) {
            const statusDisplay = document.getElementById('auth-status-display');
            
            if (authenticated && currentUser) {
                statusDisplay.innerHTML = `
                    <span class="auth-status auth-success">✅ 認証済み</span>
                    <strong>${currentUser.email}</strong>
                `;
            } else {
                statusDisplay.innerHTML = `
                    <span class="auth-status auth-error">❌ 未認証</span>
                    <strong>ログインが必要です</strong>
                `;
            }
        }
        
        // Google Drive API初期化
        // Google Drive API初期化（修正版 - APIキー対応）
        async function initializeDriveAPI() {
            if (!isAuthenticated) {
                log("drive-init-result", "❌ 認証されていません。先に認証状態を確認してください。", "error");
                return;
            }
            
            console.log("🔧 Google Drive API初期化開始");
            log("drive-init-result", "🔧 Google Drive API初期化中...", "info");
            
            try {
                // Google API Client Library が読み込まれているか確認
                if (!window.gapi) {
                    throw new Error("Google API Client Library が読み込まれていません");
                }
                
                // gapi client 初期化（APIキー付き）
                await new Promise((resolve, reject) => {
                    window.gapi.load("client", {
                        callback: resolve,
                        onerror: reject
                    });
                });
                
                console.log("🔑 Google API Client設定中...");
                
                // Firebase APIキーを使用してGoogle Drive APIを初期化
                await window.gapi.client.init({
                    apiKey: "AIzaSyBvJGdan0lvVSkaAbbSXQkoh6YyPoGyTgM", // Firebase APIキー
                    discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]
                });
                
                console.log("✅ Google API Client初期化完了");
                
                // Firebase認証からアクセストークンを取得
                let tokenSet = false;
                
                try {
                    // Firebaseの現在のユーザーからIDトークンを取得
                    if (window.firebase && firebase.auth && firebase.auth().currentUser) {
                        const user = firebase.auth().currentUser;
                        const idToken = await user.getIdToken();
                        
                        window.gapi.client.setToken({
                            access_token: idToken
                        });
                        console.log("✅ Firebase IDトークンを使用");
                        tokenSet = true;
                    }
                } catch (tokenError) {
                    console.warn("⚠️ Firebase IDトークン取得エラー:", tokenError);
                }
                
                if (!tokenSet) {
                    throw new Error("アクセストークンの設定に失敗しました。再ログインが必要です。");
                }
                
                // Drive API接続テスト
                console.log("🔍 Google Drive API接続テスト中...");
                const testResponse = await window.gapi.client.drive.about.get({
                    fields: "user"
                });
                
                console.log("✅ Drive API接続テスト成功:", testResponse.result.user.displayName);
                
                driveAPIReady = true;
                
                log("drive-init-result", `✅ Google Drive API初期化完了

APIキー: 設定済み (Firebase)
アクセストークン: 設定済み
接続テスト: 成功
ユーザー: ${testResponse.result.user.displayName}

使用可能機能:
- ファイル一覧取得  
- ファイル作成・更新  
- フォルダー管理
- ファイルメタデータ操作`, "success");
                
                // フォルダー作成ボタンを有効化
                document.getElementById("folderBtn").disabled = false;
                
                console.log("✅ Google Drive API初期化完了");
                
            } catch (error) {
                console.error("❌ Google Drive API初期化エラー:", error);
                
                let errorMessage = `❌ Google Drive API初期化失敗

エラー: ${error.message}`;
                
                if (error.status === 403) {
                    errorMessage += `

🔧 403エラー対処方法:
1. Firebase Console で Google Drive API を有効化
2. ログアウトして再ログイン（新しい権限取得）
3. Google Drive権限を許可

📋 設定手順:
1. https://console.firebase.google.com/project/rentpipe-ab04e
2. Authentication → Sign-in method → Google設定確認
3. https://console.cloud.google.com/apis/dashboard?project=rentpipe-ab04e
4. Google Drive API を有効化`;
                    
                } else if (error.status === 401) {
                    errorMessage += `

🔧 401エラー対処方法:
1. ログアウトして再ログイン
2. アクセストークンの再取得`;
                    
                } else {
                    errorMessage += `

🔧 一般的な対処方法:
1. ネットワーク接続を確認
2. ブラウザを再読み込み
3. ログアウト→再ログイン`;
                }
                
                log("drive-init-result", errorMessage, "error");
                driveAPIReady = false;
            }
        }        
        // RentPipeフォルダー作成
        async function createRentPipeFolder() {
            if (!driveAPIReady) {
                log('folder-result', '❌ Google Drive APIが初期化されていません。', 'error');
                return;
            }
            
            console.log('📁 RentPipeフォルダー作成開始');
            log('folder-result', '📁 RentPipeフォルダー作成中...', 'info');
            
            try {
                // 既存フォルダー検索
                console.log('🔍 既存RentPipeフォルダー検索中...');
                const searchResponse = await window.gapi.client.drive.files.list({
                    q: "name='RentPipe' and mimeType='application/vnd.google-apps.folder' and trashed=false",
                    spaces: 'drive'
                });
                
                let folderId;
                
                if (searchResponse.result.files.length > 0) {
                    // 既存フォルダーが見つかった
                    folderId = searchResponse.result.files[0].id;
                    console.log('📁 既存RentPipeフォルダー発見:', folderId);
                    
                    log('folder-result', `✅ 既存RentPipeフォルダーを使用

フォルダーID: ${folderId}
フォルダー名: RentPipe
状態: 既に存在

このフォルダーに顧客データ（CSV）を保存します。`, 'success');
                    
                } else {
                    // 新規フォルダー作成
                    console.log('📁 新規RentPipeフォルダー作成中...');
                    const createResponse = await window.gapi.client.drive.files.create({
                        resource: {
                            name: 'RentPipe',
                            mimeType: 'application/vnd.google-apps.folder'
                        }
                    });
                    
                    folderId = createResponse.result.id;
                    console.log('✅ 新規RentPipeフォルダー作成完了:', folderId);
                    
                    log('folder-result', `✅ 新規RentPipeフォルダー作成完了

フォルダーID: ${folderId}
フォルダー名: RentPipe
作成日時: ${new Date().toLocaleString()}

このフォルダーに顧客データ（CSV）を保存します。
Google Driveで確認できます。`, 'success');
                }
                
                // フォルダーIDをlocalStorageに保存（後で使用）
                localStorage.setItem('rentpipe_drive_folder_id', folderId);
                
            } catch (error) {
                console.error('❌ RentPipeフォルダー作成エラー:', error);
                
                let errorMessage = `❌ RentPipeフォルダー作成失敗

エラー: ${error.message}`;
                
                if (error.status === 403) {
                    errorMessage += `

原因: Google Drive API権限不足
対処方法: 
1. ログアウトして再ログイン
2. Google Drive権限を許可`;
                } else if (error.status === 401) {
                    errorMessage += `

原因: アクセストークン無効
対処方法:
1. ログアウトして再ログイン`;
                }
                
                log('folder-result', errorMessage, 'error');
            }
        }
        
        // CSV変換テスト
        function testCSVConversion() {
            console.log('📊 CSV変換テスト開始');
            log('csv-result', '📊 CSV変換テスト実行中...', 'info');
            
            try {
                // テスト用顧客データ
                const testCustomers = [
                    {
                        id: 'test-001',
                        name: 'テスト太郎',
                        email: 'test@example.com',
                        phone: '090-1234-5678',
                        age: 30,
                        occupation: 'エンジニア',
                        annualIncome: 5000000,
                        pipelineStatus: '初回相談',
                        preferences: {
                            budgetMin: 80000,
                            budgetMax: 120000,
                            areas: ['渋谷', '新宿'],
                            roomType: '1K',
                            requirements: ['駅近', 'ペット可']
                        },
                        notes: 'テスト用顧客データ',
                        urgency: '中',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        source: 'drive_api_test'
                    }
                ];
                
                // CSVヘッダー
                const headers = [
                    'id', 'name', 'email', 'phone', 'age', 'occupation',
                    'annualIncome', 'pipelineStatus', 'budgetMin', 'budgetMax',
                    'areas', 'roomType', 'requirements', 'notes', 'urgency',
                    'createdAt', 'updatedAt', 'source'
                ];
                
                // CSV生成
                const csvRows = [headers.join(',')]; // ヘッダー行
                
                testCustomers.forEach(customer => {
                    const row = headers.map(header => {
                        let value = customer[header] || '';
                        
                        // 特別な処理
                        if (header === 'areas' && customer.preferences?.areas) {
                            value = customer.preferences.areas.join(';');
                        } else if (header === 'requirements' && customer.preferences?.requirements) {
                            value = customer.preferences.requirements.join(';');
                        } else if (header === 'budgetMin') {
                            value = customer.preferences?.budgetMin || '';
                        } else if (header === 'budgetMax') {
                            value = customer.preferences?.budgetMax || '';
                        } else if (header === 'roomType') {
                            value = customer.preferences?.roomType || '';
                        }
                        
                        // CSV形式にエスケープ
                        return `"${String(value).replace(/"/g, '""')}"`;
                    });
                    
                    csvRows.push(row.join(','));
                });
                
                const csvContent = csvRows.join('\n');
                
                // 結果表示
                const result = `✅ CSV変換テスト成功

元データ: ${testCustomers.length}件の顧客データ

生成されたCSV:
${csvContent}

CSV特徴:
- エンコーディング: UTF-8
- 区切り文字: カンマ（,）
- エスケープ: ダブルクォート
- 配列データ: セミコロン（;）区切り

次のステップ: このCSVをGoogle Driveに保存`;
                
                log('csv-result', result, 'success');
                console.log('✅ CSV変換テスト完了');
                
            } catch (error) {
                console.error('❌ CSV変換テストエラー:', error);
                log('csv-result', `❌ CSV変換テスト失敗: ${error.message}`, 'error');
            }
        }
        
        // ページ読み込み時の初期化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Google Drive APIテストページ初期化');
            
            // 初期認証状態確認
            setTimeout(() => {
                checkAuthStatus();
            }, 500);
        });
    </script>
</body>
</html>
