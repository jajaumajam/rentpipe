<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>顧客管理 - RentPipe</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        .nav-user-info {
            display: flex;
            align-items: center;
            gap: 8px;
            color: white;
            font-size: 14px;
            margin-right: 15px;
        }
        
        .google-forms-section {
            margin: 1rem 0 2rem 0;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
        }
        
        .forms-auth-required {
            background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
            color: white;
        }
        
        .forms-auth-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .google-forms-buttons {
            margin-top: 15px;
            padding: 10px;
            background: #f8fafc;
            border-radius: 8px;
        }
        
        .google-forms-buttons .btn {
            margin: 0 5px;
            font-size: 14px;
        }
        
        .form-status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .form-status.created {
            background: #d1fae5;
            color: #065f46;
        }
        
        .form-status.not-created {
            background: #fef3c7;
            color: #92400e;
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1>🏠 RentPipe</h1>
            <nav class="nav-container">
                <a href="index.html">ホーム</a>
                <a href="customer.html" class="active">顧客管理</a>
                <a href="customer-minimal.html">簡易版</a>
                <a href="pipeline.html">パイプライン</a>
                <!-- ユーザー情報表示エリア -->
                <div class="nav-user-info" id="nav-user-display"></div>
                <button onclick="handleLogout()" class="btn btn-outline nav-logout">ログアウト</button>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h2>👥 顧客管理</h2>
            <p>顧客情報の管理とGoogle Forms連携（モック版）</p>
        </div>

        <!-- Google Forms連携セクション -->
        <div id="google-forms-section" class="google-forms-section">
            <h3>📝 Google Forms連携（モック版）</h3>
            <p id="forms-status-text">連携状況を確認中...</p>
            <div id="forms-action-area"></div>
        </div>

        <!-- 認証状態表示 -->
        <div id="auth-status" style="margin: 1rem 0; padding: 1rem; border-radius: 8px; background: #f3f4f6;"></div>

        <!-- 顧客データ表示エリア -->
        <div id="customer-data-status" style="margin: 1rem 0; padding: 1rem; border-radius: 8px; background: #e5f3ff;">
            <h3>📊 データ読み込み状況</h3>
            <p id="data-loading-info">データを読み込み中...</p>
            <button onclick="createTestCustomers()" class="btn btn-success">🧪 テストデータ作成</button>
            <button onclick="loadCustomerData()" class="btn btn-info">🔄 リスト更新</button>
            <button onclick="checkAllStorageKeys()" class="btn btn-warning">🔍 ストレージ確認</button>
        </div>

        <!-- 顧客リスト -->
        <div id="customer-simple-list" class="customer-grid">
            <!-- 顧客カードがここに動的に追加されます -->
        </div>
    </main>

    <!-- Firebase SDKs -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    
    <!-- 必要最小限のスクリプト -->
    <script src="js/simple-reliable-auth.js"></script>
    <script src="js/local-first-sync.js"></script>
    <script src="js/create-test-customers.js"></script>
    
    <!-- Google Forms連携（モック版・デバッグ強化） -->
    <script src="js/google-forms-mock-debug.js"></script>
    
    <script>
        // 🔧 customer.html 統合版（Google Forms APIモック版）
        console.log('🚀 Customer 管理画面初期化開始（Google Forms APIモック版）');

        // Firebase設定
        const firebaseConfig = {
            apiKey: "AIzaSyBvJGdan0lvVSkaAbbSXQkoh6YyPoGyTgM",
            authDomain: "rentpipe-ab04e.firebaseapp.com",
            projectId: "rentpipe-ab04e",
            storageBucket: "rentpipe-ab04e.firebasestorage.app",
            messagingSenderId: "586040985916",
            appId: "1:586040985916:web:3cdb5db072f1a6569fb639"
        };
        firebase.initializeApp(firebaseConfig);

        // 写真表示ユーティリティ
        const PhotoUtils = {
            photoStatus: new Map(),
            
            createSafePhotoElement: function(photoURL, size = 'normal', fallbackText = '👤', trackingId = null) {
                if (!photoURL) {
                    return this.createPlaceholder(size, fallbackText);
                }
                
                const img = document.createElement('img');
                const className = size === 'small' ? 'user-photo-small' : 'user-photo-normal';
                img.className = className;
                
                img.onload = () => {
                    console.log('✅ 写真読み込み成功:', trackingId);
                };
                
                img.onerror = () => {
                    console.log('❌ 写真読み込み失敗 - プレースホルダーに変更:', trackingId);
                    img.style.display = 'none';
                    const placeholder = this.createPlaceholder(size, fallbackText);
                    img.parentNode.insertBefore(placeholder, img);
                };
                
                img.src = photoURL;
                return img;
            },
            
            createPlaceholder: function(size, text) {
                const span = document.createElement('span');
                span.className = size === 'small' ? 'user-photo-placeholder-small' : 'user-photo-placeholder';
                span.textContent = text;
                span.style.cssText = size === 'small' ? 
                    'display: inline-block; width: 24px; height: 24px; background: #6b7280; border-radius: 50%; text-align: center; line-height: 24px; font-size: 12px; color: white;' :
                    'display: inline-block; width: 32px; height: 32px; background: #6b7280; border-radius: 50%; text-align: center; line-height: 32px; font-size: 16px; color: white;';
                return span;
            }
        };

        // 統合認証システム
        const IntegratedAuth = {
            getAuthenticatedUser: function() {
                console.log('🔍 統合認証チェック開始...');
                
                // 方法1: simple-reliable-auth方式
                const authSimple = localStorage.getItem('rentpipe_auth_simple');
                const userSimple = localStorage.getItem('rentpipe_user_simple');
                
                if (authSimple === 'logged_in' && userSimple) {
                    try {
                        const user = JSON.parse(userSimple);
                        console.log('✅ simple-reliable-auth認証確認:', user.email);
                        return { authenticated: true, user: user, method: 'simple-reliable-auth' };
                    } catch (error) {
                        console.log('❌ simple-reliable-authユーザーデータ解析失敗:', error);
                    }
                }
                
                // 方法2: Google認証フラグ方式
                const googleAuth = localStorage.getItem('rentpipe_temp_auth');
                const googleUser = localStorage.getItem('google_user_temp');
                
                if (googleAuth === 'google_authenticated' && googleUser) {
                    try {
                        const user = JSON.parse(googleUser);
                        console.log('✅ Google認証フラグで認証確認:', user.email);
                        return { authenticated: true, user: user, method: 'google-flag' };
                    } catch (error) {
                        console.log('❌ Google認証ユーザーデータ解析失敗:', error);
                    }
                }
                
                // 方法3: Firebase認証（非同期）
                return new Promise((resolve) => {
                    firebase.auth().onAuthStateChanged((user) => {
                        if (user) {
                            console.log('✅ Firebase認証で認証確認:', user.email);
                            resolve({
                                authenticated: true,
                                user: {
                                    uid: user.uid,
                                    email: user.email,
                                    displayName: user.displayName,
                                    photoURL: user.photoURL,
                                    emailVerified: user.emailVerified
                                },
                                method: 'firebase'
                            });
                        } else {
                            console.log('❌ Firebase認証: 未認証');
                            resolve(null);
                        }
                    });
                });
            },
            
            // Google認証状態チェック
            isGoogleAuthenticated: function() {
                const googleAuth = localStorage.getItem('rentpipe_temp_auth');
                const result = (googleAuth === 'google_authenticated');
                console.log('🔍 Google認証状態チェック:', result);
                return result;
            }
        };

        // Google Forms連携機能
        const GoogleFormsIntegration = {
            // Google認証状態に基づくUI更新
            updateFormsSection: function() {
                const section = document.getElementById('google-forms-section');
                const statusText = document.getElementById('forms-status-text');
                const actionArea = document.getElementById('forms-action-area');
                
                if (IntegratedAuth.isGoogleAuthenticated()) {
                    // Google認証済み
                    section.className = 'google-forms-section forms-auth-success';
                    statusText.textContent = 'Google認証が完了しています。顧客専用フォームを作成できます（モック版）。';
                    actionArea.innerHTML = `
                        <p style="margin: 0.5rem 0; opacity: 0.9; font-size: 0.9rem;">
                            各顧客カードの「📝 フォーム作成」ボタンから専用フォームを作成できます（モック版）
                        </p>
                        <button onclick="testGoogleFormsAPI()" class="btn" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; border: 1px solid rgba(255,255,255,0.3); border-radius: 4px; font-size: 12px; margin-top: 0.5rem;">
                            🎭 モック版API接続テスト
                        </button>
                    `;
                } else {
                    // Google認証未完了
                    section.className = 'google-forms-section forms-auth-required';
                    statusText.textContent = '顧客専用の物件希望調査フォームを自動作成するにはGoogle認証が必要です（モック版）';
                    actionArea.innerHTML = `
                        <button onclick="window.location.href='login.html'" class="btn" style="background: white; color: #1e40af; padding: 12px 24px; border: none; border-radius: 6px; font-weight: 600; margin-top: 1rem;">
                            🔑 Google認証してフォーム機能を利用
                        </button>
                    `;
                }
            }
        };

        // DOM読み込み完了時の処理
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('📄 DOM読み込み完了');
            
            try {
                // 統合認証チェック
                await performIntegratedAuthCheck();
                
                // ユーザー情報表示
                await displayAuthStatus();
                
                // Google Forms連携状況更新
                GoogleFormsIntegration.updateFormsSection();
                
                // 顧客データ読み込み
                loadCustomerData();
                
            } catch (error) {
                console.error('❌ 初期化エラー:', error);
            }
        });

        // 統合認証チェック
        async function performIntegratedAuthCheck() {
            console.log('🔐 統合認証チェック実行');
            
            try {
                const authResult = IntegratedAuth.getAuthenticatedUser();
                
                if (authResult && authResult.then) {
                    // 非同期（Firebase認証）
                    const result = await authResult;
                    if (!result) {
                        console.log('🔒 未認証 - ログインページにリダイレクト');
                        window.location.href = 'login.html';
                        return;
                    }
                    window.currentUser = result.user;
                    console.log('✅ Firebase認証経由で認証確認:', result.user.email);
                    
                } else if (authResult) {
                    // 同期的に認証確認済み
                    window.currentUser = authResult.user;
                    console.log('✅ 同期認証で認証確認:', authResult.user.email);
                    
                } else {
                    // 未認証
                    console.log('🔒 統合認証チェック結果: 未認証');
                    window.location.href = 'login.html';
                    return;
                }
                
            } catch (error) {
                console.error('❌ 統合認証チェックエラー:', error);
                window.location.href = 'login.html';
            }
        }

        // 認証状態表示
        async function displayAuthStatus() {
            const authDiv = document.getElementById('auth-status');
            const navUserInfo = document.getElementById('nav-user-display');
            
            if (window.currentUser) {
                console.log('👤 ユーザー情報表示開始:', window.currentUser);
                
                // 写真要素作成
                const trackingId = 'main-user-photo';
                const photoElement = PhotoUtils.createSafePhotoElement(
                    window.currentUser.photoURL,
                    'normal',
                    window.currentUser.displayName ? window.currentUser.displayName[0].toUpperCase() : '👤',
                    trackingId
                );
                
                // 認証状態セクション
                authDiv.className = 'section success';
                authDiv.innerHTML = `
                    <h3>✅ 認証済み（モック版対応）</h3>
                    <div style="display: flex; align-items: center; gap: 12px; margin-top: 10px;">
                        ${photoElement.outerHTML}
                        <div>
                            <div><strong>${window.currentUser.displayName || '名前未設定'}</strong></div>
                            <div style="color: #666; font-size: 14px;">${window.currentUser.email}</div>
                        </div>
                    </div>
                `;
                
                // ナビゲーション表示
                const navPhotoElement = PhotoUtils.createSafePhotoElement(
                    window.currentUser.photoURL,
                    'small',
                    window.currentUser.displayName ? window.currentUser.displayName[0].toUpperCase() : '👤',
                    'nav-user-photo'
                );
                
                navUserInfo.innerHTML = `
                    ${navPhotoElement.outerHTML}
                    <span>${window.currentUser.displayName || window.currentUser.email.split('@')[0]}</span>
                `;
                
            } else {
                authDiv.className = 'section error';
                authDiv.innerHTML = '<h3>❌ 未認証</h3><p>ログインページにリダイレクト中...</p>';
            }
        }

        // 顧客データ読み込み
        function loadCustomerData() {
            console.log('📊 顧客データ読み込み開始');
            
            const dataStatus = document.getElementById('data-loading-info');
            const customerList = document.getElementById('customer-simple-list');
            
            try {
                // 複数の可能なキーをチェック
                const possibleKeys = [
                    'customers',               // create-test-customers.jsが使用
                    'rentpipe_demo_customers', // 以前のバージョンで使用
                    'rentpipe_customers',      // 別バージョンで使用
                    'demo_customers'           // テスト用
                ];
                
                let customers = null;
                let usedKey = null;
                
                for (const key of possibleKeys) {
                    const storedData = localStorage.getItem(key);
                    if (storedData) {
                        try {
                            const parsedData = JSON.parse(storedData);
                            if (Array.isArray(parsedData) && parsedData.length > 0) {
                                customers = parsedData;
                                usedKey = key;
                                break;
                            }
                        } catch (parseError) {
                            console.warn(`キー ${key} のパースエラー:`, parseError);
                        }
                    }
                }
                
                if (customers) {
                    console.log(`✅ 顧客データ読み込み成功: ${customers.length}件（キー: ${usedKey}）`);
                    dataStatus.textContent = `顧客データ: ${customers.length}件読み込み完了（キー: ${usedKey}）`;
                    displayCustomers(customers);
                } else {
                    console.log('⚠️ 顧客データなし');
                    dataStatus.textContent = 'まだ顧客データがありません。「🧪 テストデータ作成」ボタンをお試しください。';
                    customerList.innerHTML = '<p style="text-align: center; color: #666;">顧客データがありません</p>';
                }
            } catch (error) {
                console.error('❌ 顧客データ読み込みエラー:', error);
                dataStatus.textContent = 'データ読み込みエラーが発生しました';
                customerList.innerHTML = '<p style="text-align: center; color: #dc2626;">データ読み込みに失敗しました</p>';
            }
        }

        // 全ストレージキー確認（デバッグ用）
        function checkAllStorageKeys() {
            console.log('🔍 全ストレージキー確認');
            
            const allKeys = [];
            for (let i = 0; i < localStorage.length; i++) {
                allKeys.push(localStorage.key(i));
            }
            
            console.log('📋 全ローカルストレージキー:', allKeys);
            
            // 顧客データ関連のキーのみチェック
            const customerRelatedKeys = allKeys.filter(key => 
                key.includes('customer') || key.includes('demo') || key === 'customers'
            );
            
            console.log('👥 顧客関連キー:', customerRelatedKeys);
            
            // 結果を画面表示
            const dataStatus = document.getElementById('data-loading-info');
            dataStatus.innerHTML = `
                <strong>🔍 ストレージキー確認結果:</strong><br>
                全キー数: ${allKeys.length}<br>
                顧客関連キー: ${customerRelatedKeys.join(', ') || 'なし'}<br>
                <small>詳細はコンソールをご確認ください</small>
            `;
            
            // 各顧客関連キーの内容も確認
            customerRelatedKeys.forEach(key => {
                const data = localStorage.getItem(key);
                try {
                    const parsed = JSON.parse(data);
                    console.log(`📊 ${key}:`, parsed);
                } catch (e) {
                    console.log(`📊 ${key} (文字列):`, data);
                }
            });
        }

        // 顧客表示（Google Forms連携ボタン付き）
        function displayCustomers(customers) {
            const container = document.getElementById('customer-simple-list');
            container.innerHTML = '';
            
            customers.forEach((customer, index) => {
                const customerCard = document.createElement('div');
                customerCard.className = 'customer-card';
                customerCard.style.cssText = 'border: 1px solid #ddd; border-radius: 8px; padding: 1rem; margin: 0.5rem; background: white;';
                
                // Google認証状態に基づくボタン表示
                const isGoogleAuth = IntegratedAuth.isGoogleAuthenticated();
                const hasGoogleForm = customer.googleForm && customer.googleForm.formId;
                
                let formsButtonHTML = '';
                
                if (!isGoogleAuth) {
                    formsButtonHTML = `<div class="google-forms-buttons">
                        <p style="font-size: 14px; color: #666; margin: 5px 0;">Google認証後にフォーム機能をご利用いただけます（モック版）</p>
                    </div>`;
                } else if (hasGoogleForm) {
                    // フォーム作成済み
                    const mockBadge = customer.googleForm.isMock ? ' 🎭' : '';
                    formsButtonHTML = `<div class="google-forms-buttons">
                        <span class="form-status created">✅ フォーム作成済み${mockBadge}</span>
                        <div style="margin-top: 8px;">
                            <button onclick="alert('モック版フォームです。実際のフォームは作成されていません。')" class="btn btn-success btn-sm">🔗 フォーム確認${mockBadge}</button>
                            <button onclick="alert('モック版です。編集機能は実装予定です。')" class="btn btn-info btn-sm">⚙️ 編集${mockBadge}</button>
                            <button onclick="viewFormResponses('${customer.id}')" class="btn btn-warning btn-sm">📊 回答確認${mockBadge}</button>
                        </div>
                    </div>`;
                } else {
                    // フォーム未作成
                    formsButtonHTML = `<div class="google-forms-buttons">
                        <span class="form-status not-created">📝 フォーム未作成</span>
                        <div style="margin-top: 8px;">
                            <button onclick="createCustomerForm('${customer.id}', ${index})" class="btn btn-primary btn-sm">🎭 専用フォーム作成（モック版）</button>
                        </div>
                    </div>`;
                }
                
                customerCard.innerHTML = `
                    <div style="display: flex; justify-content: between; align-items: flex-start;">
                        <div style="flex: 1;">
                            <h4 style="margin: 0 0 8px 0; color: #1f2937;">${customer.name}</h4>
                            <p style="margin: 0 0 4px 0; font-size: 14px; color: #6b7280;">📧 ${customer.email}</p>
                            <p style="margin: 0 0 4px 0; font-size: 14px; color: #6b7280;">📞 ${customer.phone}</p>
                            <p style="margin: 0 0 4px 0; font-size: 14px; color: #6b7280;">💰 予算: ${customer.preferences ? customer.preferences.budgetMin + '-' + customer.preferences.budgetMax + '万円' : '未設定'}</p>
                            <p style="margin: 0; font-size: 14px; color: #6b7280;">🏠 希望エリア: ${customer.preferences ? customer.preferences.areas.join(', ') : '未設定'}</p>
                        </div>
                        <div style="margin-left: 15px;">
                            <button onclick="showCustomerDetail('${customer.id}')" class="btn btn-outline btn-sm">詳細</button>
                        </div>
                    </div>
                    ${formsButtonHTML}
                `;
                
                container.appendChild(customerCard);
            });
        }

        // フォーム回答確認（プレースホルダー）
        function viewFormResponses(customerId) {
            console.log('📊 フォーム回答確認:', customerId);
            alert(`🎭 モック版: 顧客ID ${customerId} のフォーム回答確認機能\n\n実装予定の機能です。`);
        }

        // Google Forms API テスト機能（モック版）
        function testGoogleFormsAPI() {
            console.log('🎭 Google Forms API接続テスト開始（モック版）');
            
            if (window.GoogleFormsSimple) {
                window.GoogleFormsSimple.initialize().then(result => {
                    if (result) {
                        alert('✅ Google Forms API接続テスト成功！（モック版）\n\nフォーム作成機能が利用可能です。');
                    } else {
                        alert('❌ Google Forms API接続テスト失敗（モック版）\n\nコンソールでエラー詳細をご確認ください。');
                    }
                });
            } else {
                alert('❌ GoogleFormsSimple（モック版）が読み込まれていません');
            }
        }

        // 顧客詳細表示
        function showCustomerDetail(customerId) {
            console.log('👤 顧客詳細表示:', customerId);
            window.location.href = `customer-detail.html?id=${customerId}`;
        }

        // ログアウト処理
        function handleLogout() {
            if (confirm('ログアウトしますか？')) {
                // 各認証方式をクリア
                localStorage.removeItem('rentpipe_auth_simple');
                localStorage.removeItem('rentpipe_user_simple');
                localStorage.removeItem('rentpipe_temp_auth');
                localStorage.removeItem('google_user_temp');
                localStorage.removeItem('google_access_token');
                
                // Firebaseからもログアウト
                firebase.auth().signOut().then(() => {
                    console.log('✅ 全認証からログアウト完了');
                    window.location.href = 'login.html';
                });
            }
        }

        console.log('✅ Customer 管理画面（Google Forms APIモック版）スクリプト準備完了');
    </script>
</body>
</html>
