<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Test - 新APIキー版</title>
    <style>
        body { 
            font-family: 'Noto Sans JP', sans-serif; 
            padding: 20px; 
            max-width: 600px; 
            margin: 0 auto; 
            line-height: 1.6;
        }
        .status { 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 8px; 
            border: 1px solid #ddd;
        }
        .success { background: #d4edda; border-color: #c3e6cb; }
        .error { background: #f8d7da; border-color: #f5c6cb; }
        .info { background: #d1ecf1; border-color: #b8daff; }
        button {
            background: #1e3a8a; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 6px; 
            margin: 5px; 
            cursor: pointer;
        }
        pre { 
            background: #f5f5f5; 
            padding: 10px; 
            border-radius: 4px; 
            font-size: 12px; 
            overflow-x: auto;
            max-height: 300px;
        }
    </style>
</head>
<body>
    <h1>🔥 Firebase Test - 新APIキー版（制限なし）</h1>
    
    <div id="firebase-status" class="status info">
        <strong>🔧 Firebase初期化中...</strong>
    </div>
    
    <div>
        <button onclick="testFirebaseInit()">Step 1: Firebase初期化</button>
        <button onclick="testAuthentication()">Step 2: 匿名認証テスト</button>
        <button onclick="testFirestoreBasic()">Step 3: Firestore基本操作</button>
        <button onclick="testMultiTenant()">Step 4: マルチテナントテスト</button>
    </div>
    
    <div id="results"></div>
    
    <pre id="logs"></pre>

    <!-- Firebase SDKs -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    
    <script>
        // ログ表示
        function log(message, isError = false) {
            const timestamp = new Date().toLocaleTimeString();
            const logElement = document.getElementById('logs');
            const logEntry = `[${timestamp}] ${isError ? 'ERROR' : 'INFO'}: ${message}\n`;
            logElement.textContent += logEntry;
            logElement.scrollTop = logElement.scrollHeight;
            
            if (isError) {
                console.error(message);
            } else {
                console.log(message);
            }
        }
        
        // 結果表示
        function showResult(title, success, message) {
            const resultsDiv = document.getElementById('results');
            const resultClass = success ? 'success' : 'error';
            const icon = success ? '✅' : '❌';
            
            resultsDiv.innerHTML += `
                <div class="status ${resultClass}">
                    <strong>${icon} ${title}</strong><br>
                    ${message}
                </div>
            `;
        }
        
        // グローバル変数
        let app, db, auth;
        
        // Step 1: Firebase初期化テスト
        function testFirebaseInit() {
            log('🔥 Firebase初期化テスト開始...');
            
            try {
                const firebaseConfig = {
                    apiKey: "AIzaSyBvJGdan0lvVSkaAbbSXQkoh6YyPoGyTgM",
                    authDomain: "rentpipe-ab04e.firebaseapp.com",
                    projectId: "rentpipe-ab04e",
                    storageBucket: "rentpipe-ab04e.firebasestorage.app",
                    messagingSenderId: "586040985916",
                    appId: "1:586040985916:web:3cdb5db072f1a6569fb639"
                };
                
                app = firebase.initializeApp(firebaseConfig);
                db = firebase.firestore();
                auth = firebase.auth();
                
                log(`✅ Firebase App初期化成功: ${app.name}`);
                log(`✅ Project ID: ${app.options.projectId}`);
                log(`✅ APIキー: ${firebaseConfig.apiKey.substring(0, 25)}...`);
                
                showResult('Firebase初期化', true, `プロジェクト: ${firebaseConfig.projectId}`);
                
            } catch (error) {
                log(`❌ Firebase初期化エラー: ${error.message}`, true);
                showResult('Firebase初期化', false, error.message);
            }
        }
        
        // Step 2: 匿名認証テスト
        async function testAuthentication() {
            log('🔐 匿名認証テスト開始...');
            
            try {
                if (!auth) {
                    throw new Error('先にFirebase初期化を実行してください');
                }
                
                log('匿名認証を実行中...');
                const result = await auth.signInAnonymously();
                const user = result.user;
                
                log(`✅ 匿名認証成功: ${user.uid}`);
                log(`認証プロバイダー: ${user.isAnonymous ? 'anonymous' : 'other'}`);
                
                showResult('匿名認証', true, `認証成功 (UID: ${user.uid.substring(0, 8)}...)`);
                
            } catch (error) {
                log(`❌ 匿名認証エラー: ${error.message}`, true);
                log(`エラーコード: ${error.code}`);
                showResult('匿名認証', false, `${error.code}: ${error.message}`);
            }
        }
        
        // Step 3: Firestore基本操作テスト
        async function testFirestoreBasic() {
            log('📊 Firestore基本操作テスト開始...');
            
            try {
                if (!db) {
                    throw new Error('先にFirebase初期化を実行してください');
                }
                
                const currentUser = auth.currentUser;
                if (!currentUser) {
                    throw new Error('先に認証を完了してください');
                }
                
                const testData = {
                    message: 'Phase2 基本テストデータ',
                    userId: currentUser.uid,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    testId: Math.random().toString(36).substr(2, 9)
                };
                
                // 書き込みテスト
                log('Firestore書き込み実行中...');
                const docRef = await db.collection('system').doc('basic-test').set(testData);
                log('✅ Firestore書き込み成功');
                
                // 読み取りテスト
                log('Firestore読み取り実行中...');
                const doc = await db.collection('system').doc('basic-test').get();
                if (doc.exists) {
                    const data = doc.data();
                    log(`✅ Firestore読み取り成功: ${data.testId}`);
                    showResult('Firestore基本操作', true, `書き込み・読み取り成功 (TestID: ${data.testId})`);
                } else {
                    throw new Error('書き込んだデータが見つかりません');
                }
                
            } catch (error) {
                log(`❌ Firestore基本操作エラー: ${error.message}`, true);
                log(`エラーコード: ${error.code || 'N/A'}`);
                showResult('Firestore基本操作', false, error.message);
            }
        }
        
        // Step 4: マルチテナントテスト
        async function testMultiTenant() {
            log('🏢 マルチテナントテスト開始...');
            
            try {
                const currentUser = auth.currentUser;
                if (!currentUser) {
                    throw new Error('先に認証を完了してください');
                }
                
                const tenantId = currentUser.uid;
                
                // テナント別顧客データ作成
                const customerData = {
                    name: 'テスト顧客',
                    email: 'test@example.com',
                    phone: '090-1234-5678',
                    status: 'initial_contact',
                    tenantId: tenantId,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                
                // テナント別コレクションに保存
                log(`テナント ${tenantId} に顧客データ作成中...`);
                const docRef = await db.collection(`tenants/${tenantId}/customers`).add(customerData);
                log(`✅ 顧客データ作成成功: ${docRef.id}`);
                
                // テナント別データ読み取り
                const snapshot = await db.collection(`tenants/${tenantId}/customers`).get();
                log(`✅ テナント顧客データ取得: ${snapshot.size}件`);
                
                showResult('マルチテナント', true, `テナント分離テスト成功 (TenantID: ${tenantId.substring(0, 8)}..., 顧客数: ${snapshot.size})`);
                
            } catch (error) {
                log(`❌ マルチテナントテストエラー: ${error.message}`, true);
                showResult('マルチテナント', false, error.message);
            }
        }
        
        // ページ読み込み時の初期化
        window.addEventListener('load', function() {
            log('ページ読み込み完了 - 新APIキー版');
            document.getElementById('firebase-status').innerHTML = '<strong>✅ 準備完了</strong><br>Step 1から順番にテストを実行してください。';
            document.getElementById('firebase-status').className = 'status success';
        });
        
        // エラーキャッチ
        window.addEventListener('error', function(event) {
            log(`JavaScript Error: ${event.error ? event.error.message : event.message}`, true);
        });
        
        window.addEventListener('unhandledrejection', function(event) {
            log(`Unhandled Promise Rejection: ${event.reason}`, true);
        });
    </script>
</body>
</html>
