// Firebase設定 - 本番モード（Phase2）新APIキー版
console.log('🔧 RentPipe Phase2本番モードで起動中...');

// 設定フラグ
const DEMO_MODE = false; // Phase2: 本番モードに切り替え
const DEBUG_MODE = true;

// 無限ループ防止
const urlParams = new URLSearchParams(window.location.search);
const fallbackRequested = urlParams.has('fallback');

if (!DEMO_MODE && !fallbackRequested) {
    console.log('🔥 本番モード: Firebase接続開始...');
    
    // Firebase本番設定（制限なし新APIキー）
    const firebaseConfig = {
        apiKey: "AIzaSyBvJGdan0lvVSkaAbbSXQkoh6YyPoGyTgM",
        authDomain: "rentpipe-ab04e.firebaseapp.com",
        projectId: "rentpipe-ab04e",
        storageBucket: "rentpipe-ab04e.firebasestorage.app",
        messagingSenderId: "586040985916",
        appId: "1:586040985916:web:3cdb5db072f1a6569fb639"
    };

    try {
        // Firebase初期化
        if (typeof firebase !== 'undefined') {
            const app = firebase.initializeApp(firebaseConfig);
            window.db = firebase.firestore();
            window.auth = firebase.auth();
            
            console.log('✅ Firebase初期化成功');
            console.log(`🏢 Project ID: ${firebaseConfig.projectId}`);
            console.log(`🔑 APIキー: ${firebaseConfig.apiKey.substring(0, 20)}...`);
            
            // 接続テスト（非同期・エラーでも続行）
            window.db.collection('system').doc('connection-test').get()
                .then((doc) => {
                    console.log('✅ Firestore接続確認完了');
                    console.log(`📊 接続テスト結果: exists=${doc.exists}`);
                })
                .catch(error => {
                    console.warn('⚠️ Firestore接続テスト:', error.message);
                });
            
        } else {
            throw new Error('Firebase SDKが読み込まれていません');
        }
        
    } catch (error) {
        console.error('❌ Firebase初期化失敗:', error);
        console.log('🔄 デモモードで続行します...');
        initializeDemoMode();
    }
    
} else {
    console.log('📱 デモモード: ローカルデータで動作します');
    initializeDemoMode();
}

// デモモード初期化関数
function initializeDemoMode() {
    window.db = {
        collection: function(name) {
            if (DEBUG_MODE) console.log(`📊 デモ: ${name}コレクションアクセス`);
            return {
                orderBy: function() { return this; },
                limit: function() { return this; },
                get: function() {
                    if (DEBUG_MODE) console.log('📊 デモ: データ取得（空の結果）');
                    return Promise.resolve({
                        docs: [],
                        size: 0,
                        empty: true,
                        map: function() { return []; },
                        forEach: function() {}
                    });
                },
                add: function(data) {
                    if (DEBUG_MODE) console.log('📊 デモ: データ追加', data);
                    return Promise.resolve({ 
                        id: `demo-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`
                    });
                },
                doc: function(id) {
                    return {
                        get: function() {
                            return Promise.resolve({ 
                                exists: false, 
                                data: () => null,
                                id: id
                            });
                        },
                        set: function(data) {
                            if (DEBUG_MODE) console.log('📊 デモ: データ設定', id, data);
                            return Promise.resolve();
                        },
                        update: function(data) {
                            if (DEBUG_MODE) console.log('📊 デモ: データ更新', id, data);
                            return Promise.resolve();
                        },
                        delete: function() {
                            if (DEBUG_MODE) console.log('📊 デモ: データ削除', id);
                            return Promise.resolve();
                        }
                    };
                }
            };
        }
    };
    
    window.auth = {
        onAuthStateChanged: function(callback) {
            setTimeout(() => callback(null), 100);
        },
        signInAnonymously: function() {
            return Promise.resolve({ 
                user: { 
                    uid: 'demo-user-' + Date.now(),
                    isAnonymous: true,
                    metadata: {
                        creationTime: new Date().toISOString()
                    },
                    providerData: []
                } 
            });
        },
        get currentUser() {
            return null;
        }
    };
    
    window.firebase = {
        initializeApp: function() { return { name: '[DEFAULT]', options: { projectId: 'demo' } }; },
        firestore: function() { return window.db; },
        auth: function() { return window.auth; }
    };
    
    console.log('✅ デモモード初期化完了');
}

// マルチテナント対応データマネージャー（Phase2版）
window.FirebaseDataManager = {
    getCurrentTenantId: function() {
        if (window.auth && window.auth.currentUser) {
            return window.auth.currentUser.uid;
        }
        return 'demo-tenant-001';
    },
    
    getCustomers: async function() {
        try {
            if (DEMO_MODE || fallbackRequested) {
                // デモモード：ローカルストレージから取得
                const stored = localStorage.getItem('rentpipe_demo_customers');
                return stored ? JSON.parse(stored) : [];
            }
            
            // 本番モード：Firestoreから取得
            const tenantId = this.getCurrentTenantId();
            if (!tenantId || tenantId === 'demo-tenant-001') {
                console.warn('有効なテナントIDがありません');
                return [];
            }
            
            const snapshot = await window.db
                .collection(`tenants/${tenantId}/customers`)
                .orderBy('updatedAt', 'desc')
                .get();
            
            const customers = [];
            snapshot.forEach(doc => {
                customers.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            console.log(`✅ Firestore顧客データ取得: ${customers.length}件`);
            return customers;
            
        } catch (error) {
            console.error('顧客データ取得エラー:', error);
            return [];
        }
    },
    
    saveCustomer: async function(customerData) {
        try {
            if (DEMO_MODE || fallbackRequested) {
                // デモモード：ローカルストレージに保存
                const customers = await this.getCustomers();
                const existingIndex = customers.findIndex(c => c.id === customerData.id);
                
                if (existingIndex !== -1) {
                    customers[existingIndex] = customerData;
                } else {
                    customers.push(customerData);
                }
                
                localStorage.setItem('rentpipe_demo_customers', JSON.stringify(customers));
                return customerData.id || `customer_${Date.now()}`;
            }
            
            // 本番モード：Firestoreに保存
            const tenantId = this.getCurrentTenantId();
            if (!tenantId || tenantId === 'demo-tenant-001') {
                throw new Error('有効なテナントIDがありません');
            }
            
            const docRef = customerData.id ? 
                window.db.collection(`tenants/${tenantId}/customers`).doc(customerData.id) :
                window.db.collection(`tenants/${tenantId}/customers`).doc();
            
            const saveData = {
                ...customerData,
                tenantId: tenantId,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                ...(customerData.id ? {} : { 
                    id: docRef.id,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp() 
                })
            };
            
            await docRef.set(saveData, { merge: true });
            console.log(`✅ Firestore顧客データ保存完了: ${docRef.id}`);
            return docRef.id;
            
        } catch (error) {
            console.error('顧客データ保存エラー:', error);
            return false;
        }
    },
    
    testConnection: async function() {
        try {
            if (DEMO_MODE || fallbackRequested) {
                console.log('📱 デモモード：接続テストをスキップ');
                return true;
            }
            
            if (!window.db) {
                return false;
            }
            
            await window.db.collection('system').doc('connection-test').get();
            console.log('✅ Firebase接続テスト成功');
            return true;
            
        } catch (error) {
            console.error('❌ Firebase接続テスト失敗:', error);
            return false;
        }
    }
};

// 安全な初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 RentPipe Phase2 安全初期化開始...');
    
    // 遅延実行で安全性を確保
    setTimeout(() => {
        if (window.FirebaseDataManager) {
            window.FirebaseDataManager.testConnection()
                .then(result => {
                    console.log(`🔗 接続状況: ${result ? 'Firebase成功' : 'デモモード継続'}`);
                })
                .catch(error => {
                    console.warn('接続テスト実行エラー:', error.message);
                });
        }
    }, 1000);
    
    console.log('✅ RentPipe Phase2 準備完了');
});

console.log('🎉 Firebase Phase2設定ロード完了（新APIキー版）');
