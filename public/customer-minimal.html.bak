<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>顧客管理（簡易版） - RentPipe</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        /* ユーザー写真表示用のCSS */
        .user-photo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #e5e7eb;
            background: #f3f4f6;
        }
        
        .user-photo-small {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .user-photo-placeholder {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: white;
            font-weight: bold;
        }
        
        .user-photo-placeholder-small {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: white;
            font-weight: bold;
        }
        
        .nav-user-info {
            display: flex;
            align-items: center;
            gap: 8px;
            color: white;
            font-size: 14px;
            margin-right: 15px;
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1>🏠 RentPipe</h1>
            <nav class="nav-container">
                <a href="index.html">ホーム</a>
                <a href="customer.html">顧客管理</a>
                <a href="customer-minimal.html" class="active">簡易版</a>
                <a href="pipeline.html">パイプライン</a>
                <!-- ユーザー情報表示エリア -->
                <div class="nav-user-info" id="nav-user-display"></div>
                <button onclick="handleLogout()" class="btn btn-outline nav-logout">ログアウト</button>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h2>👥 顧客管理（簡易版）</h2>
            <p>シンプルな顧客情報の表示</p>
        </div>

        <!-- 認証状態表示 -->
        <div id="auth-status" style="margin: 1rem 0; padding: 1rem; border-radius: 8px; background: #f3f4f6;"></div>

        <!-- 顧客データ表示エリア -->
        <div id="customer-data-status" style="margin: 1rem 0; padding: 1rem; border-radius: 8px; background: #e5f3ff;">
            <h3>📊 データ読み込み状況</h3>
            <p id="data-loading-info">データを読み込み中...</p>
        </div>

        <!-- 顧客リスト -->
        <div id="customer-simple-list" class="customer-grid">
            <!-- 顧客カードがここに動的に追加されます -->
        </div>
    </main>

    <!-- Firebase SDKs -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    
    <script>
        // 🔧 customer-minimal.html 写真テスト修正版
        console.log('🚀 Customer Minimal 写真テスト修正版 初期化開始');

        // Firebase設定
        const firebaseConfig = {
            apiKey: "AIzaSyBvJGdan0lvVSkaAbbSXQkoh6YyPoGyTgM",
            authDomain: "rentpipe-ab04e.firebaseapp.com",
            projectId: "rentpipe-ab04e",
            storageBucket: "rentpipe-ab04e.firebasestorage.app",
            messagingSenderId: "586040985916",
            appId: "1:586040985916:web:3cdb5db072f1a6569fb639"
        };
        firebase.initializeApp(firebaseConfig);

        // 写真表示ユーティリティ（修正版）
        const PhotoUtils = {
            // 写真状況の追跡
            photoStatus: new Map(),
            
            // 安全な写真表示（修正版）
            createSafePhotoElement: function(photoURL, size = 'normal', fallbackText = '👤', trackingId = null) {
                console.log('🖼️ 写真要素作成:', { photoURL, size, trackingId });
                
                if (!photoURL) {
                    console.log('📷 写真URL なし - プレースホルダー表示');
                    this.photoStatus.set(trackingId || 'default', { status: 'no-url', element: 'placeholder' });
                    return this.createPlaceholder(size, fallbackText);
                }
                
                const img = document.createElement('img');
                const className = size === 'small' ? 'user-photo-small' : 'user-photo';
                img.className = className;
                img.alt = 'ユーザー写真';
                
                // CORS対応 - referrerPolicy を設定
                img.referrerPolicy = 'no-referrer';
                img.crossOrigin = 'anonymous';
                
                // 成功時のハンドリング
                img.onload = () => {
                    console.log('✅ 写真読み込み成功:', photoURL);
                    this.photoStatus.set(trackingId || 'default', { 
                        status: 'loaded', 
                        element: 'image',
                        url: photoURL,
                        timestamp: new Date().toISOString()
                    });
                    
                    // 表示ステータスを更新
                    this.updatePhotoStatusDisplay(trackingId);
                };
                
                // エラー時のハンドリング
                img.onerror = (error) => {
                    console.warn('📷 写真読み込み失敗 - プレースホルダーに切り替え:', photoURL);
                    this.photoStatus.set(trackingId || 'default', { 
                        status: 'error', 
                        element: 'placeholder',
                        url: photoURL,
                        error: error.toString(),
                        timestamp: new Date().toISOString()
                    });
                    
                    const placeholder = this.createPlaceholder(size, fallbackText);
                    img.parentNode.replaceChild(placeholder, img);
                    
                    // 表示ステータスを更新
                    this.updatePhotoStatusDisplay(trackingId);
                };
                
                // 読み込み開始を記録
                this.photoStatus.set(trackingId || 'default', { 
                    status: 'loading', 
                    element: 'image',
                    url: photoURL,
                    timestamp: new Date().toISOString()
                });
                
                // 写真URLを設定
                img.src = photoURL;
                
                return img;
            },
            
            // プレースホルダー作成
            createPlaceholder: function(size = 'normal', fallbackText = '👤') {
                const div = document.createElement('div');
                const className = size === 'small' ? 'user-photo-placeholder-small' : 'user-photo-placeholder';
                div.className = className;
                div.textContent = fallbackText;
                
                console.log('🎭 プレースホルダー作成:', { size, fallbackText });
                return div;
            },
            
            // 写真ステータス表示更新
            updatePhotoStatusDisplay: function(trackingId) {
                if (!trackingId) return;
                
                const status = this.photoStatus.get(trackingId);
                const displayElement = document.getElementById('photo-status-display');
                
                if (displayElement && status) {
                    let statusText = '';
                    let statusIcon = '';
                    
                    switch (status.status) {
                        case 'loaded':
                            statusText = '✅ 正常表示';
                            statusIcon = '✅';
                            break;
                        case 'error':
                            statusText = '🔄 代替表示（プレースホルダー）';
                            statusIcon = '🔄';
                            break;
                        case 'loading':
                            statusText = '⏳ 読み込み中';
                            statusIcon = '⏳';
                            break;
                        case 'no-url':
                            statusText = '🎭 プレースホルダー（写真URLなし）';
                            statusIcon = '🎭';
                            break;
                        default:
                            statusText = '❓ 不明';
                            statusIcon = '❓';
                    }
                    
                    displayElement.innerHTML = `写真表示: ${statusText}`;
                }
            },
            
            // 写真状況の詳細取得
            getPhotoStatusDetails: function(trackingId) {
                return this.photoStatus.get(trackingId || 'default');
            },
            
            // 写真URLのテスト（改善版 - 実際の表示結果を使用）
            getPhotoDisplayStatus: function(trackingId) {
                const status = this.photoStatus.get(trackingId || 'default');
                if (!status) {
                    return { working: false, reason: 'ステータス未記録' };
                }
                
                switch (status.status) {
                    case 'loaded':
                        return { working: true, reason: '正常に読み込み・表示済み' };
                    case 'error':
                        return { working: false, reason: '読み込み失敗（代替表示中）' };
                    case 'loading':
                        return { working: null, reason: '読み込み中' };
                    case 'no-url':
                        return { working: false, reason: '写真URLが提供されていません' };
                    default:
                        return { working: false, reason: '不明な状態' };
                }
            }
        };

        // 統合認証システム
        const IntegratedAuth = {
            // 複数の認証方式から統一されたユーザー情報を取得
            getAuthenticatedUser: function() {
                console.log('🔍 統合認証チェック開始...');
                
                // 方法1: simple-reliable-auth方式
                const authSimple = localStorage.getItem('rentpipe_auth_simple');
                const userSimple = localStorage.getItem('rentpipe_user_simple');
                
                if (authSimple === 'logged_in' && userSimple) {
                    try {
                        const user = JSON.parse(userSimple);
                        console.log('✅ simple-reliable-auth方式で認証確認:', user.email);
                        console.log('🖼️ 写真URL確認:', user.photoURL);
                        return { method: 'simple-reliable-auth', user: user };
                    } catch (e) {
                        console.warn('simple-reliable-auth データパースエラー:', e);
                    }
                }
                
                // 方法2: Google認証フラグ方式
                const tempAuth = localStorage.getItem('rentpipe_temp_auth');
                const userInfo = localStorage.getItem('rentpipe_user_info');
                
                if (tempAuth === 'google_authenticated' && userInfo) {
                    try {
                        const user = JSON.parse(userInfo);
                        console.log('✅ Google認証フラグ方式で認証確認:', user.email);
                        console.log('🖼️ 写真URL確認:', user.photoURL);
                        
                        // 認証データを simple-reliable-auth 形式に統一
                        this.unifyAuthData(user);
                        
                        return { method: 'google-auth-flag', user: user };
                    } catch (e) {
                        console.warn('Google認証データパースエラー:', e);
                    }
                }
                
                // 方法3: Firebase認証（非同期）
                return new Promise((resolve) => {
                    firebase.auth().onAuthStateChanged((user) => {
                        if (user) {
                            console.log('✅ Firebase認証で認証確認:', user.email);
                            console.log('🖼️ Firebase写真URL:', user.photoURL);
                            
                            const userData = {
                                uid: user.uid,
                                email: user.email,
                                displayName: user.displayName,
                                photoURL: user.photoURL
                            };
                            
                            // 認証データを統一
                            this.unifyAuthData(userData);
                            
                            resolve({ method: 'firebase-auth', user: userData });
                        } else {
                            console.log('❌ 全ての認証方式で未認証');
                            resolve(null);
                        }
                    });
                });
            },
            
            // 認証データを統一フォーマットに変換
            unifyAuthData: function(user) {
                console.log('🔧 認証データを統一フォーマットに変換:', user.email);
                
                // simple-reliable-auth 形式で保存
                localStorage.setItem('rentpipe_auth_simple', 'logged_in');
                localStorage.setItem('rentpipe_user_simple', JSON.stringify(user));
                
                // Google認証フラグも保存（互換性）
                localStorage.setItem('rentpipe_temp_auth', 'google_authenticated');
                localStorage.setItem('rentpipe_user_info', JSON.stringify(user));
                
                console.log('✅ 認証データ統一完了');
            },
            
            // 認証状態確認（同期・非同期両対応）
            isAuthenticated: function() {
                const syncResult = this.getAuthenticatedUser();
                
                if (syncResult && typeof syncResult === 'object' && !syncResult.then) {
                    // 同期的に認証確認済み
                    return true;
                } else if (syncResult && syncResult.then) {
                    // 非同期（Firebase認証）
                    return syncResult.then(result => !!result);
                } else {
                    // 未認証
                    return false;
                }
            }
        };

        // DOM読み込み完了時の処理
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('📄 DOM読み込み完了');
            
            // 統合認証チェック
            await performIntegratedAuthCheck();
            
            // ユーザー情報表示
            await displayAuthStatus();
            
            // 顧客データ読み込み
            loadCustomerData();
        });

        // 統合認証チェック
        async function performIntegratedAuthCheck() {
            console.log('🔐 統合認証チェック実行');
            
            try {
                const authResult = IntegratedAuth.getAuthenticatedUser();
                
                if (authResult && authResult.then) {
                    // 非同期（Firebase認証）
                    const result = await authResult;
                    if (!result) {
                        console.log('🔒 未認証 - ログインページにリダイレクト');
                        window.location.href = 'login-google-simple.html';
                        return;
                    }
                    window.currentUser = result.user;
                    console.log('✅ Firebase認証経由で認証確認:', result.user.email);
                    
                } else if (authResult) {
                    // 同期的に認証確認済み
                    window.currentUser = authResult.user;
                    console.log('✅ 同期認証で認証確認:', authResult.user.email);
                    
                } else {
                    // 未認証
                    console.log('🔒 統合認証チェック結果: 未認証');
                    window.location.href = 'login-google-simple.html';
                    return;
                }
                
            } catch (error) {
                console.error('❌ 統合認証チェックエラー:', error);
                window.location.href = 'login-google-simple.html';
            }
        }

        // 認証状態表示（修正版）
        async function displayAuthStatus() {
            const authDiv = document.getElementById('auth-status');
            
            if (window.currentUser) {
                console.log('👤 ユーザー情報表示開始:', window.currentUser);
                console.log('🖼️ 写真URL:', window.currentUser.photoURL);
                
                // 写真要素作成（追跡ID付き）
                const trackingId = 'main-user-photo';
                const photoElement = PhotoUtils.createSafePhotoElement(
                    window.currentUser.photoURL,
                    'normal',
                    window.currentUser.displayName ? window.currentUser.displayName.charAt(0) : '👤',
                    trackingId
                );
                
                // 認証状態表示（修正版）
                authDiv.innerHTML = `
                    <h3 style="color: #059669; margin: 0 0 0.5rem 0;">✅ 認証状態: ログイン済み</h3>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <div id="user-photo-container"></div>
                        <div>
                            <div style="font-weight: bold;">${window.currentUser.displayName || 'ユーザー'}</div>
                            <div style="font-size: 0.9rem; color: #6b7280;">${window.currentUser.email}</div>
                            <div style="font-size: 0.8rem; color: #9ca3af;" id="photo-status-display">写真: 読み込み中...</div>
                        </div>
                    </div>
                `;
                authDiv.style.background = '#d1fae5';
                
                // 写真要素を追加
                document.getElementById('user-photo-container').appendChild(photoElement);
                
                // 写真読み込み完了を待って最終ステータス表示（修正版）
                setTimeout(() => {
                    const photoStatus = PhotoUtils.getPhotoDisplayStatus(trackingId);
                    const statusDisplay = document.getElementById('photo-status-display');
                    
                    if (statusDisplay) {
                        if (photoStatus.working === true) {
                            statusDisplay.innerHTML = '写真: ✅ 正常表示';
                            statusDisplay.style.color = '#059669';
                        } else if (photoStatus.working === false) {
                            statusDisplay.innerHTML = '写真: 🎭 代替表示';
                            statusDisplay.style.color = '#f59e0b';
                        } else {
                            statusDisplay.innerHTML = '写真: ⏳ 読み込み中';
                            statusDisplay.style.color = '#6b7280';
                        }
                    }
                    
                    console.log('📸 最終写真ステータス:', photoStatus);
                }, 2000);
                
                // ナビゲーションにもユーザー情報表示
                updateNavigation();
                
            } else {
                authDiv.innerHTML = `
                    <h3 style="color: #dc2626; margin: 0 0 0.5rem 0;">❌ 認証状態: 未ログイン</h3>
                    <p style="margin: 0;">ログインが必要です</p>
                    <button onclick="window.location.href='login-google-simple.html'" style="margin-top: 10px; padding: 8px 16px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;">
                        Googleログイン
                    </button>
                `;
                authDiv.style.background = '#fee2e2';
            }
        }

        // ナビゲーション更新（修正版）
        function updateNavigation() {
            if (!window.currentUser) return;
            
            const navUserInfo = document.getElementById('nav-user-display');
            if (navUserInfo && !navUserInfo.hasChildNodes()) {
                console.log('🎨 ナビゲーション写真表示:', window.currentUser.photoURL);
                
                // 小さい写真要素作成（追跡ID付き）
                const smallPhotoElement = PhotoUtils.createSafePhotoElement(
                    window.currentUser.photoURL,
                    'small',
                    window.currentUser.displayName ? window.currentUser.displayName.charAt(0) : '👤',
                    'nav-user-photo'
                );
                
                // テキスト要素作成
                const textSpan = document.createElement('span');
                textSpan.textContent = window.currentUser.displayName || window.currentUser.email.split('@')[0];
                
                // ナビゲーションに追加
                navUserInfo.appendChild(smallPhotoElement);
                navUserInfo.appendChild(textSpan);
            }
        }

        // 顧客データ読み込み（変更なし）
        function loadCustomerData() {
            console.log('📊 顧客データ読み込み開始');
            
            const statusDiv = document.getElementById('data-loading-info');
            const customerList = document.getElementById('customer-simple-list');
            
            // 複数のキーから顧客データを検索
            const possibleKeys = [
                'rentpipe_demo_customers',
                'rentpipe_customers', 
                'customers',
                'rentpipe_unified_customers'
            ];
            
            let customers = [];
            let foundKey = null;
            
            for (const key of possibleKeys) {
                const data = localStorage.getItem(key);
                console.log(`🔍 チェック中: ${key} = ${data ? 'データあり' : 'データなし'}`);
                
                if (data) {
                    try {
                        const parsed = JSON.parse(data);
                        if (Array.isArray(parsed) && parsed.length > 0) {
                            customers = parsed;
                            foundKey = key;
                            console.log(`✅ データ発見: ${key} (${parsed.length}件)`);
                            break;
                        }
                    } catch (e) {
                        console.warn(`❌ パースエラー: ${key}`, e);
                    }
                }
            }
            
            // 状況を表示
            if (customers.length > 0) {
                statusDiv.innerHTML = `
                    ✅ 顧客データを読み込みました<br>
                    データソース: <code>${foundKey}</code><br>
                    件数: <strong>${customers.length}件</strong>
                `;
                statusDiv.parentElement.style.background = '#d1fae5';
                
                // 顧客リストを表示
                displayCustomers(customers);
                
            } else {
                statusDiv.innerHTML = `
                    ❌ 顧客データが見つかりません<br>
                    <small>確認したキー: ${possibleKeys.join(', ')}</small><br>
                    <button onclick="createDemoData()" class="btn btn-primary" style="margin-top: 10px;">デモデータを作成</button>
                `;
                statusDiv.parentElement.style.background = '#fee2e2';
            }
        }

        // 顧客リスト表示
        function displayCustomers(customers) {
            const container = document.getElementById('customer-simple-list');
            container.innerHTML = '';
            
            customers.forEach((customer, index) => {
                const customerCard = document.createElement('div');
                customerCard.className = 'customer-card';
                customerCard.innerHTML = `
                    <div class="customer-header">
                        <h3>${customer.name || '名前なし'}</h3>
                        <span class="status-badge status-${(customer.pipelineStatus || customer.status || 'unknown').replace(/\s+/g, '-')}">${customer.pipelineStatus || customer.status || '未設定'}</span>
                    </div>
                    <div class="customer-info">
                        <p>📞 ${customer.phone || '電話番号なし'}</p>
                        <p>📧 ${customer.email || 'メールなし'}</p>
                        <p>💰 予算: ${customer.preferences?.budget || customer.budget || '未設定'}</p>
                    </div>
                    <div class="customer-actions">
                        <button onclick="showCustomerDetail('${customer.id}')" class="btn btn-outline">詳細</button>
                    </div>
                `;
                container.appendChild(customerCard);
            });
        }

        // 顧客詳細表示
        function showCustomerDetail(customerId) {
            if (customerId) {
                window.location.href = `customer-detail.html?id=${customerId}`;
            } else {
                alert('顧客IDが見つかりません');
            }
        }

        // デモデータ作成
        function createDemoData() {
            const demoCustomers = [
                {
                    id: 'demo1',
                    name: '田中太郎',
                    phone: '090-1234-5678',
                    email: 'tanaka@example.com',
                    pipelineStatus: '初回相談',
                    preferences: { budget: '10-15万円' },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'demo2', 
                    name: '佐藤花子',
                    phone: '080-9876-5432',
                    email: 'sato@example.com',
                    pipelineStatus: '物件紹介',
                    preferences: { budget: '8-12万円' },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'demo3',
                    name: '鈴木一郎',
                    phone: '070-1111-2222',
                    email: 'suzuki@example.com',
                    pipelineStatus: '内見',
                    preferences: { budget: '12-18万円' },
                    createdAt: new Date().toISOString()
                }
            ];
            
            localStorage.setItem('rentpipe_demo_customers', JSON.stringify(demoCustomers));
            console.log('✅ デモデータ作成完了');
            
            // 再読み込み
            loadCustomerData();
        }

        // ログアウト処理
        function handleLogout() {
            if (confirm('ログアウトしますか？')) {
                // 全ての認証データをクリア
                const authKeys = [
                    'rentpipe_auth_simple',
                    'rentpipe_user_simple',
                    'rentpipe_temp_auth',
                    'rentpipe_user_info',
                    'rentpipe_auth'
                ];
                
                authKeys.forEach(key => {
                    localStorage.removeItem(key);
                });
                
                // Firebase認証もサインアウト
                firebase.auth().signOut();
                
                console.log('🔒 ログアウト完了');
                window.location.href = 'login-google-simple.html';
            }
        }

        console.log('✅ Customer Minimal 写真テスト修正版スクリプト準備完了');
    </script>
</body>
</html>
