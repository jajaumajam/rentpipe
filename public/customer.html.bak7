<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>顧客管理 - RentPipe</title>
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="css/pricing.css">
</head>
<body>
    <div class="customer-container">
        <div class="customer-header">
            <h1>顧客管理</h1>
            <div class="header-actions">
                <button onclick="refreshCustomers()" class="btn btn-primary">
                    更新
                </button>
                <button onclick="openQuickRegister()" class="btn btn-success">
                    + 新規登録
                </button>
            </div>
        </div>

        <!-- 検索・フィルター機能 -->
        <div class="search-filters">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="名前・メール・電話番号で検索" onkeyup="filterCustomers()">
            </div>
            
            <div class="filter-container">
                <select id="statusFilter" onchange="filterCustomers()">
                    <option value="">すべてのステータス</option>
                    <option value="初回相談">初回相談</option>
                    <option value="物件紹介">物件紹介</option>
                    <option value="内見">内見</option>
                    <option value="申込">申込</option>
                    <option value="審査">審査</option>
                    <option value="契約">契約</option>
                    <option value="完了">完了</option>
                </select>
                
                <select id="sortOrder" onchange="filterCustomers()">
                    <option value="updatedDesc">更新日順（新）</option>
                    <option value="updatedAsc">更新日順（旧）</option>
                    <option value="nameAsc">名前順（A-Z）</option>
                    <option value="createdDesc">登録日順（新）</option>
                </select>
            </div>
            
            <div class="results-count" id="resultsCount">-</div>
        </div>
        
        <div class="customers-grid" id="customersList">
            <!-- 顧客カードが動的に挿入される -->
        </div>
    </div>
    
    <!-- Firebase SDKs -->
    
    <!-- プラン管理システム -->
    <script src="js/pricing-plans.js"></script>
    <script src="js/plan-manager.js"></script>
    <script src="js/customer-limit-checker.js"></script>
    
    <!-- 既存のスクリプト読み込み -->
    <script src="js/unified-data-manager.js"></script>
    <script src="js/navigation.js"></script>
    <script src="js/customer-unified.js"></script>
    <script src="js/data-key-unifier.js"></script>
    <script src="js/cross-page-sync.js"></script>
    <script src="js/local-first-sync.js"></script>
    <script src="js/customer-status-editor.js"></script>
    <!-- デバッグ機能 -->
    <script src="js/debug-customer-detail.js"></script>
    <!-- Google認証システム -->
    <!-- 緩い認証チェック -->
    <!-- 緩い認証チェック -->
    <!-- 統一認証チェック -->
    <!-- 認証無効化テスト -->
</html>
    <!-- 顧客詳細リンク機能 -->
    <script src="js/customer-detail-links.js"></script>

<!-- Google Forms統合機能とデバッグ -->
<script src="js/google-identity-config.js"></script>
<script src="js/integrated-auth-manager-v2.js"></script>
<script src="js/google-forms-api-v2.js"></script>
<script src="js/customer-integration-debug.js"></script>
<script src="js/customer-google-forms-integration-v2.js"></script>
<script src="js/debug-integration-status.js"></script>
<script src="js/manual-integration-trigger.js"></script>

<!-- 即座にデバッグ情報を表示 -->
<script>
// 📊 インライン即時デバッグ
console.log('🔧 インライン即時デバッグ開始...');

// 全ての必要なオブジェクトが読み込まれているか確認
setTimeout(() => {
    console.log('='.repeat(40));
    console.log('📊 即時統合状況確認');
    console.log('='.repeat(40));
    
    // 基本オブジェクトの確認
    console.log('🔧 基本オブジェクト:');
    console.log('  GoogleIdentity:', !!window.GoogleIdentity);
    console.log('  IntegratedAuthManagerV2:', !!window.IntegratedAuthManagerV2);
    console.log('  GoogleFormsAPIv2:', !!window.GoogleFormsAPIv2);
    console.log('  CustomerGoogleFormsIntegrationV2:', !!window.CustomerGoogleFormsIntegrationV2);
    
    // Google認証状態
    if (window.IntegratedAuthManagerV2) {
        const authState = window.IntegratedAuthManagerV2.getAuthState();
        console.log('🔐 認証状態:');
        console.log('  認証済み:', authState.isAuthenticated);
        console.log('  Google認証:', authState.googleAuth.isSignedIn);
        console.log('  ユーザー:', authState.googleAuth.user?.email || '未認証');
        
        // Google認証済みの場合、手動で統合機能を実行
        if (authState.googleAuth.isSignedIn) {
            console.log('🚀 Google認証済み - 統合機能を手動実行');
            
            // Google Formsセクションを手動で追加
            if (!document.querySelector('#google-forms-section')) {
                const section = document.createElement('div');
                section.id = 'google-forms-section';
                section.style.cssText = `
                    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                    color: white;
                    padding: 1.5rem;
                    border-radius: 12px;
                    margin: 1rem 0 2rem 0;
                    text-align: center;
                `;
                section.innerHTML = `
                    <h3 style="margin: 0 0 0.5rem 0;">✅ Google Forms連携済み</h3>
                    <p style="margin: 0; opacity: 0.9; font-size: 0.9rem;">
                        ログイン中: ${authState.googleAuth.user.email} | 顧客カードから専用フォームを作成できます
                    </p>
                `;
                
                const main = document.querySelector('main, .main-content, .container') || document.body;
                const firstChild = main.firstElementChild;
                if (firstChild) {
                    main.insertBefore(section, firstChild);
                } else {
                    main.appendChild(section);
                }
                console.log('✅ Google Formsセクション手動追加完了');
            }
            
            // 顧客カードにボタンを手動で追加
            setTimeout(() => {
                addButtonsToCustomerCards(authState);
            }, 1000);
        } else {
            console.log('🔑 Google認証が必要です');
            
            // 認証が必要な場合のセクション追加
            if (!document.querySelector('#google-forms-section')) {
                const section = document.createElement('div');
                section.id = 'google-forms-section';
                section.style.cssText = `
                    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
                    color: white;
                    padding: 1.5rem;
                    border-radius: 12px;
                    margin: 1rem 0 2rem 0;
                    text-align: center;
                `;
                section.innerHTML = `
                    <h3 style="margin: 0 0 1rem 0;">📝 Google Forms連携</h3>
                    <p style="margin: 0 0 1rem 0; opacity: 0.9;">
                        顧客専用の物件希望調査フォームを自動作成できます
                    </p>
                    <button onclick="window.location.href='login-google-v2.html'" style="background: white; color: #1e40af; padding: 12px 24px; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">
                        🔑 Google認証してフォーム機能を利用
                    </button>
                `;
                
                const main = document.querySelector('main, .main-content, .container') || document.body;
                const firstChild = main.firstElementChild;
                if (firstChild) {
                    main.insertBefore(section, firstChild);
                } else {
                    main.appendChild(section);
                }
                console.log('✅ Google認証セクション手動追加完了');
            }
        }
    } else {
        console.log('❌ IntegratedAuthManagerV2が見つかりません');
    }
    
    console.log('='.repeat(40));
}, 2000);

// 顧客カードにボタンを追加する関数
function addButtonsToCustomerCards(authState) {
    console.log('🔧 顧客カードにボタン追加開始...');
    
    // 複数の方法で顧客カードを検索
    const selectors = [
        '.customer-card',
        '.customer-item', 
        '[data-customer-id]',
        '.card',
        '[class*="customer"]'
    ];
    
    let customerCards = [];
    for (const selector of selectors) {
        const found = document.querySelectorAll(selector);
        if (found.length > 0) {
            customerCards = Array.from(found);
            console.log(`✅ セレクター "${selector}" で ${found.length} 個のカード発見`);
            break;
        }
    }
    
    if (customerCards.length === 0) {
        console.log('❌ 顧客カードが見つかりません');
        
        // 強制的にテスト用のカードを作成
        const testCard = document.createElement('div');
        testCard.className = 'customer-card test-card';
        testCard.style.cssText = `
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        `;
        testCard.innerHTML = `
            <h4>🧪 テスト顧客カード</h4>
            <p>この顧客カードはテスト用です</p>
        `;
        
        const main = document.querySelector('main, .main-content, .container') || document.body;
        main.appendChild(testCard);
        
        customerCards = [testCard];
        console.log('✅ テスト用顧客カードを作成');
    }
    
    // 各顧客カードにボタンを追加
    customerCards.forEach((card, index) => {
        // 既存のGoogle Formsボタンがある場合は削除
        const existingBtns = card.querySelectorAll('.google-forms-btn-manual');
        existingBtns.forEach(btn => btn.remove());
        
        // ボタンコンテナを作成
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'google-forms-container-manual';
        buttonContainer.style.cssText = `
            margin-top: 10px;
            padding: 10px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
        `;
        
        // フォーム作成ボタンを作成
        const createBtn = document.createElement('button');
        createBtn.className = 'btn btn-primary btn-sm google-forms-btn-manual';
        createBtn.innerHTML = '📝 専用フォーム作成';
        createBtn.style.cssText = `
            background: #3b82f6;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            margin: 5px;
        `;
        createBtn.onclick = () => {
            alert(`🧪 フォーム作成テスト\n\nカード ${index + 1} でフォーム作成機能が呼び出されました！\n\n実際のフォーム作成機能を実装中です...`);
            console.log('📝 フォーム作成ボタンクリック:', index + 1);
        };
        
        buttonContainer.appendChild(createBtn);
        card.appendChild(buttonContainer);
        
        console.log(`✅ カード ${index + 1} にボタン追加完了`);
    });
    
    console.log('✅ 顧客カードボタン追加完了');
}

// デバッグ用のグローバル関数を定義
window.checkStatus = function() {
    console.log('📊 手動ステータスチェック実行');
    
    const status = {
        url: window.location.pathname,
        googleIdentity: !!window.GoogleIdentity,
        integratedAuth: !!window.IntegratedAuthManagerV2,
        googleFormsAPI: !!window.GoogleFormsAPIv2,
        integration: !!window.CustomerGoogleFormsIntegrationV2,
        customerCards: document.querySelectorAll('.customer-card, .customer-item, [data-customer-id]').length,
        googleFormsSection: !!document.querySelector('#google-forms-section'),
        googleFormsButtons: document.querySelectorAll('.google-forms-btn-manual, .google-forms-btn-v2').length
    };
    
    console.log('📊 現在の状況:', status);
    alert(`📊 統合状況\n\n✅ Google Identity: ${status.googleIdentity}\n✅ 統合認証: ${status.integratedAuth}\n✅ Forms API: ${status.googleFormsAPI}\n📋 顧客カード: ${status.customerCards}個\n📝 Formsボタン: ${status.googleFormsButtons}個`);
    
    return status;
};

window.forceIntegration = function() {
    console.log('🚀 統合機能強制実行');
    if (window.IntegratedAuthManagerV2) {
        const authState = window.IntegratedAuthManagerV2.getAuthState();
        if (authState.googleAuth.isSignedIn) {
            addButtonsToCustomerCards(authState);
            alert('✅ 統合機能を強制実行しました！');
        } else {
            alert('❌ Google認証が必要です');
        }
    } else {
        alert('❌ 統合認証マネージャーが見つかりません');
    }
};

console.log('✅ インライン即時デバッグ準備完了');
console.log('💡 ブラウザコンソールで checkStatus() または forceIntegration() を実行できます');
</script>


<!-- 確実な自動認証修正 -->
<script>
// 🎯 確実な自動認証修正（インライン版）
(function() {
    console.log('🎯 確実な自動認証修正開始...');
    
    // 確実な認証状態修正関数
    function fixAuthStateNow() {
        try {
            console.log('🔧 即座に認証状態修正を実行...');
            
            // LocalStorageから認証データを取得
            const googleIdentityData = localStorage.getItem('google_identity_data');
            const rentpipeAuth = localStorage.getItem('rentpipe_auth');
            
            console.log('📊 認証データ確認:', {
                hasGoogleIdentityData: !!googleIdentityData,
                hasRentpipeAuth: !!rentpipeAuth
            });
            
            if (!googleIdentityData && !rentpipeAuth) {
                console.log('❌ 認証データが見つかりません');
                return false;
            }
            
            let authData = null;
            
            // google_identity_dataを優先
            if (googleIdentityData) {
                try {
                    authData = JSON.parse(googleIdentityData);
                    console.log('✅ google_identity_dataから取得:', authData.user?.email);
                } catch (e) {
                    console.error('❌ google_identity_data解析エラー:', e);
                }
            }
            
            if (!authData || !authData.user) {
                console.log('❌ 有効な認証データがありません');
                return false;
            }
            
            // IntegratedAuthManagerV2の存在確認と待機
            let attempts = 0;
            const maxAttempts = 10;
            
            const waitForAuthManager = () => {
                attempts++;
                console.log(`🔍 IntegratedAuthManagerV2確認試行 ${attempts}/${maxAttempts}`);
                
                if (window.IntegratedAuthManagerV2) {
                    console.log('✅ IntegratedAuthManagerV2発見 - 認証状態を設定');
                    
                    // 認証状態を直接設定
                    window.IntegratedAuthManagerV2.googleAuth = {
                        isSignedIn: true,
                        user: authData.user,
                        accessToken: authData.accessToken || authData.user.accessToken
                    };
                    
                    window.IntegratedAuthManagerV2.isAuthenticated = true;
                    window.IntegratedAuthManagerV2.currentUser = {
                        ...authData.user,
                        googleAuth: authData.user
                    };
                    window.IntegratedAuthManagerV2.authMethod = 'google';
                    
                    console.log('✅ 認証状態設定完了');
                    
                    // UIを更新
                    updateUI();
                    
                    // 統合機能を実行
                    setTimeout(() => {
                        if (window.forceIntegration) {
                            console.log('🔄 統合機能再実行...');
                            window.forceIntegration();
                        }
                    }, 500);
                    
                    // 成功通知
                    showSuccessNotification(authData.user.email);
                    
                    return true;
                    
                } else if (attempts < maxAttempts) {
                    // 再試行
                    setTimeout(waitForAuthManager, 500);
                } else {
                    console.log('❌ IntegratedAuthManagerV2が見つかりませんでした');
                    return false;
                }
            };
            
            waitForAuthManager();
            
        } catch (error) {
            console.error('❌ 認証状態修正エラー:', error);
            return false;
        }
    }
    
    // UIを更新
    function updateUI() {
        try {
            console.log('🎨 UI更新開始...');
            
            const authState = window.IntegratedAuthManagerV2?.getAuthState();
            if (!authState) {
                console.log('❌ 認証状態取得失敗');
                return false;
            }
            
            console.log('📊 認証状態:', authState);
            
            // Google Formsセクションの更新
            let section = document.querySelector('#google-forms-section');
            
            if (authState.googleAuth.isSignedIn) {
                console.log('✅ Google認証済み - UIを更新');
                
                // セクションが存在しない場合は作成
                if (!section) {
                    section = document.createElement('div');
                    section.id = 'google-forms-section';
                    const main = document.querySelector('main, .main-content, .container') || document.body;
                    const firstChild = main.firstElementChild;
                    if (firstChild) {
                        main.insertBefore(section, firstChild);
                    } else {
                        main.appendChild(section);
                    }
                    console.log('📝 新しいGoogle Formsセクション作成');
                }
                
                // 認証済み表示に更新
                section.style.cssText = `
                    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                    color: white;
                    padding: 1.5rem;
                    border-radius: 12px;
                    margin: 1rem 0 2rem 0;
                    text-align: center;
                `;
                section.innerHTML = `
                    <h3 style="margin: 0 0 0.5rem 0;">✅ Google Forms連携済み</h3>
                    <p style="margin: 0; opacity: 0.9; font-size: 0.9rem;">
                        ログイン中: ${authState.googleAuth.user?.email} | 各顧客カードから専用フォームを作成できます
                    </p>
                `;
                
                console.log('✅ Google Forms連携済み表示に更新完了');
                return true;
                
            } else {
                console.log('❌ Google未認証状態');
                return false;
            }
            
        } catch (error) {
            console.error('❌ UI更新エラー:', error);
            return false;
        }
    }
    
    // 成功通知を表示
    function showSuccessNotification(email) {
        try {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #10b981;
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                z-index: 1000;
                font-size: 14px;
                max-width: 350px;
                border-left: 4px solid #059669;
            `;
            notification.innerHTML = `
                <div style="font-weight: 600; margin-bottom: 5px;">✅ Google認証状態を復元しました</div>
                <div style="opacity: 0.9; font-size: 13px;">${email}</div>
                <div style="opacity: 0.7; font-size: 12px; margin-top: 5px;">Google Forms機能が利用可能です</div>
            `;
            
            document.body.appendChild(notification);
            console.log('✅ 成功通知表示');
            
            // 5秒後に自動削除
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.transition = 'opacity 0.5s ease';
                    notification.style.opacity = '0';
                    setTimeout(() => {
                        notification.parentNode.removeChild(notification);
                    }, 500);
                }
            }, 5000);
            
        } catch (error) {
            console.error('❌ 成功通知エラー:', error);
        }
    }
    
    // 複数のタイミングで確実に実行
    function startAutoFix() {
        console.log('🚀 自動修正開始...');
        
        // 即座に実行
        fixAuthStateNow();
        
        // 2秒後にも実行
        setTimeout(() => {
            console.log('🔄 2秒後のバックアップ実行...');
            fixAuthStateNow();
        }, 2000);
        
        // 4秒後にも実行
        setTimeout(() => {
            console.log('🔄 4秒後の最終実行...');
            fixAuthStateNow();
        }, 4000);
    }
    
    // グローバル関数として追加
    window.forceAuthFix = fixAuthStateNow;
    
    // DOMContentLoadedで実行
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', startAutoFix);
    } else {
        startAutoFix();
    }
    
    console.log('✅ 確実な自動認証修正準備完了');
    console.log('💡 手動実行: forceAuthFix()');
})();
</script>

