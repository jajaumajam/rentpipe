<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>顧客詳細 - RentPipe</title>
    <link rel="stylesheet" href="css/main.css">
    <style>
        .customer-detail-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            margin-top: 20px;
        }
        
        .detail-header {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .customer-info h1 {
            color: #1e3a8a;
            margin-bottom: 10px;
            font-size: 28px;
        }
        
        .customer-meta {
            color: #64748b;
            font-size: 14px;
            margin-bottom: 15px;
        }
        
        .status-badge {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            color: white;
            margin-bottom: 15px;
        }
        
        .status-初回相談 { background: #6366f1; }
        .status-物件紹介 { background: #8b5cf6; }
        .status-内見 { background: #06b6d4; }
        .status-申込 { background: #10b981; }
        .status-審査 { background: #f59e0b; }
        .status-契約 { background: #ef4444; }
        .status-完了 { background: #22c55e; }
        
        .detail-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .detail-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .detail-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .detail-card h3 {
            color: #1e3a8a;
            margin-bottom: 15px;
            font-size: 18px;
            border-bottom: 2px solid #f1f5f9;
            padding-bottom: 8px;
        }
        
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding: 8px 0;
            border-bottom: 1px solid #f8fafc;
        }
        
        .info-label {
            font-weight: 600;
            color: #374151;
            min-width: 120px;
        }
        
        .info-value {
            color: #6b7280;
            flex: 1;
            text-align: right;
        }
        
        .preferences-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        
        .preference-tag {
            background: #f1f5f9;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            color: #1e3a8a;
        }
        
        .notes-section {
            grid-column: 1 / -1;
        }
        
        .notes-content {
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
            margin-top: 10px;
            line-height: 1.6;
            white-space: pre-wrap;
        }
        
        .status-change-section {
            background: #fef3c7;
            border: 1px solid #fbbf24;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .status-select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        .history-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .history-date {
            font-size: 12px;
            color: #6b7280;
            min-width: 140px;
        }
        
        .history-action {
            flex: 1;
            color: #374151;
        }
        
        .error-state {
            background: #fee2e2;
            border: 1px solid #ef4444;
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            color: #991b1b;
        }
        
        .loading-state {
            background: #f0f9ff;
            border: 1px solid #3b82f6;
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            color: #1e40af;
        }
        
        .debug-info {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            font-family: monospace;
            font-size: 12px;
        }
        
        @media (max-width: 768px) {
            .detail-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .detail-grid {
                grid-template-columns: 1fr;
            }
            
            .detail-actions {
                justify-content: stretch;
            }
            
            .detail-actions .btn {
                flex: 1;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- ナビゲーションは createNavigation() で自動生成される -->

    <main class="customer-detail-container">
        <!-- 戻るボタン -->
        <div style="margin-bottom: 20px;">
            <button onclick="goBack()" class="btn btn-outline">
                ← 戻る
            </button>
        </div>

        <!-- デバッグ情報 -->
        <div id="debugInfo" class="debug-info" style="display: none;">
            デバッグ情報が表示されます
        </div>

        <!-- ローディング状態 -->
        <div id="loadingState" class="loading-state">
            <div style="font-size: 48px; margin-bottom: 15px;">⏳</div>
            <h2>顧客情報を読み込み中...</h2>
            <p>しばらくお待ちください</p>
        </div>

        <!-- エラー状態 -->
        <div id="errorState" class="error-state" style="display: none;">
            <div style="font-size: 48px; margin-bottom: 15px;">❌</div>
            <h2>顧客情報の読み込みに失敗しました</h2>
            <p id="errorMessage">エラーの詳細</p>
            <button onclick="showDebugInfo()" class="btn btn-warning" style="margin: 15px 10px 0 0;">
                デバッグ情報表示
            </button>
            <button onclick="retryLoad()" class="btn btn-primary" style="margin: 15px 10px 0 0;">
                再試行
            </button>
            <button onclick="goBack()" class="btn btn-outline" style="margin: 15px 0 0 10px;">
                戻る
            </button>
        </div>

        <!-- 詳細コンテンツ -->
        <div id="detailContent" style="display: none;">
            <!-- 顧客詳細ヘッダー -->
            <div class="detail-header">
                <div class="customer-info">
                    <h1 id="customerName">顧客名</h1>
                    <div class="customer-meta">
                        <span id="customerEmail">メール</span> • 
                        <span id="customerPhone">電話番号</span>
                    </div>
                    <div id="statusBadge" class="status-badge">ステータス</div>
                    <div class="customer-meta">
                        登録日: <span id="createdAt">-</span> • 
                        最終更新: <span id="updatedAt">-</span>
                    </div>
                </div>
                
                <div class="detail-actions">
                    <button onclick="editCustomer()" class="btn btn-primary">
                        ✏️ 編集
                    </button>
                    <button onclick="exportCustomer()" class="btn btn-outline">
                        📥 エクスポート
                    </button>
                    <button onclick="deleteCustomer()" class="btn btn-danger">
                        🗑️ 削除
                    </button>
                </div>
            </div>

            <!-- 詳細情報グリッド -->
            <div class="detail-grid">
                <!-- 基本情報 -->
                <div class="detail-card">
                    <h3>📋 基本情報</h3>
                    <div class="info-row">
                        <span class="info-label">年齢</span>
                        <span class="info-value" id="customerAge">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">職業</span>
                        <span class="info-value" id="customerOccupation">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">年収</span>
                        <span class="info-value" id="customerIncome">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">緊急度</span>
                        <span class="info-value" id="customerUrgency">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">連絡希望時間</span>
                        <span class="info-value" id="customerContactTime">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">流入元</span>
                        <span class="info-value" id="customerSource">-</span>
                    </div>
                </div>

                <!-- 希望条件 -->
                <div class="detail-card">
                    <h3>🏡 希望条件</h3>
                    <div class="info-row">
                        <span class="info-label">予算</span>
                        <span class="info-value" id="customerBudget">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">間取り</span>
                        <span class="info-value" id="customerRoomType">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">希望エリア</span>
                        <span class="info-value" id="customerAreas">-</span>
                    </div>
                    <div style="margin-top: 15px;">
                        <div class="info-label" style="margin-bottom: 8px;">特別な要望</div>
                        <div id="customerRequirements" class="preferences-list">
                            <!-- 動的に生成 -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- メモ・履歴セクション -->
            <div class="detail-grid">
                <!-- メモ -->
                <div class="detail-card notes-section">
                    <h3>📝 メモ・特記事項</h3>
                    <div id="customerNotes" class="notes-content">
                        メモはありません
                    </div>
                </div>

                <!-- ステータス変更履歴 -->
                <div class="detail-card">
                    <h3>📈 ステータス変更履歴</h3>
                    <div id="statusHistory">
                        <!-- 動的に生成 -->
                    </div>
                </div>
            </div>

            <!-- ⭐ クイックアクション（復活！）-->
            <div class="detail-card">
                <h3>⚡ クイックアクション</h3>
                <div class="status-change-section">
                    <label for="newStatus"><strong>ステータスを変更する:</strong></label>
                    <select id="newStatus" class="status-select">
                        <option value="">ステータスを選択</option>
                        <option value="初回相談">初回相談</option>
                        <option value="物件紹介">物件紹介</option>
                        <option value="内見">内見</option>
                        <option value="申込">申込</option>
                        <option value="審査">審査</option>
                        <option value="契約">契約</option>
                        <option value="完了">完了</option>
                    </select>
                    <button onclick="changeStatus()" class="btn btn-primary" style="width: 100%; margin-top: 10px;">
                        ステータス更新
                    </button>
                </div>
            </div>
        </div>
    </main>

    <!-- 既存のスクリプト読み込み（統一ナビゲーション使用） -->
    <script src="js/navigation.js"></script>
    <script src="js/debug-customer-detail.js"></script>

    <script>
        // グローバル変数
        let currentCustomer = null;
        let customerId = null;
        let debugMode = false;

        // ページ初期化
        document.addEventListener('DOMContentLoaded', function() {
            // URLにdebugパラメータがある場合はデバッグモード
            const urlParams = new URLSearchParams(window.location.search);
            debugMode = urlParams.has('debug');
            
            // ナビゲーション生成完了を待つ
            setTimeout(() => {
                initializePage();
            }, 200);
        });

        // ページ初期化処理
        function initializePage() {
            console.log('🔍 顧客詳細ページ初期化開始...');
            
            try {
                // URLパラメータから顧客IDを取得
                const urlParams = new URLSearchParams(window.location.search);
                customerId = urlParams.get('id');
                
                log(`現在のURL: ${window.location.href}`);
                log(`取得した顧客ID: ${customerId}`);
                
                if (!customerId) {
                    throw new Error('顧客IDがURLパラメータで指定されていません');
                }
                
                // 顧客詳細の読み込み
                loadCustomerDetail();
                
            } catch (error) {
                console.error('❌ ページ初期化エラー:', error);
                showError(`ページ初期化エラー: ${error.message}`);
            }
        }

        // ログ出力（デバッグモード対応）
        function log(message) {
            console.log(message);
            if (debugMode) {
                const debugInfo = document.getElementById('debugInfo');
                debugInfo.style.display = 'block';
                debugInfo.innerHTML += message + '<br>';
            }
        }

        // 顧客詳細データの読み込み
        function loadCustomerDetail() {
            log(`📋 顧客詳細読み込み開始: ID=${customerId}`);
            
            try {
                // 複数の可能なキーをチェック
                const possibleKeys = [
                    'rentpipe_demo_customers',
                    'rentpipe_customers', 
                    'customers',
                    'demo_customers'
                ];
                
                let customersData = null;
                let usedKey = null;
                
                for (const key of possibleKeys) {
                    const data = localStorage.getItem(key);
                    if (data) {
                        try {
                            const parsed = JSON.parse(data);
                            if (Array.isArray(parsed) && parsed.length > 0) {
                                customersData = parsed;
                                usedKey = key;
                                log(`✅ データ発見: キー=${key}, 件数=${parsed.length}`);
                                break;
                            }
                        } catch (e) {
                            log(`❌ キー ${key} のパースエラー: ${e.message}`);
                        }
                    }
                }
                
                if (!customersData) {
                    // 利用可能なキーをログ出力
                    const allKeys = [];
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        if (key.includes('rentpipe') || key.includes('customer')) {
                            allKeys.push(key);
                        }
                    }
                    log(`利用可能なキー: ${allKeys.join(', ')}`);
                    throw new Error('顧客データが見つかりません。data-debug.htmlでデータを生成してください。');
                }
                
                // 顧客を検索
                currentCustomer = customersData.find(customer => {
                    const matches = customer.id === customerId;
                    log(`ID比較: "${customer.id}" === "${customerId}" → ${matches}`);
                    return matches;
                });
                
                if (!currentCustomer) {
                    const availableIds = customersData.map(c => c.id);
                    log(`利用可能な顧客ID: ${availableIds.join(', ')}`);
                    throw new Error(`ID: ${customerId} の顧客が見つかりません`);
                }
                
                log('✅ 顧客データ取得成功');
                displayCustomerDetail();
                
            } catch (error) {
                console.error('❌ 顧客データ読み込みエラー:', error);
                showError(`顧客データの読み込みに失敗しました: ${error.message}`);
            }
        }

        // エラー表示
        function showError(message) {
            log(`❌ エラー表示: ${message}`);
            
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('detailContent').style.display = 'none';
            document.getElementById('errorState').style.display = 'block';
            document.getElementById('errorMessage').textContent = message;
        }

        // デバッグ情報表示
        function showDebugInfo() {
            document.getElementById('debugInfo').style.display = 'block';
            
            // 現在のローカルストレージ内容を表示
            const allData = {};
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key.includes('rentpipe') || key.includes('customer')) {
                    try {
                        allData[key] = JSON.parse(localStorage.getItem(key));
                    } catch (e) {
                        allData[key] = localStorage.getItem(key);
                    }
                }
            }
            
            document.getElementById('debugInfo').innerHTML = `
                <strong>デバッグ情報:</strong><br>
                URL: ${window.location.href}<br>
                顧客ID: ${customerId}<br>
                ローカルストレージデータ:<br>
                <pre style="font-size: 10px; max-height: 200px; overflow-y: auto;">${JSON.stringify(allData, null, 2)}</pre>
            `;
        }

        // 再試行
        function retryLoad() {
            log('🔄 再試行開始...');
            
            document.getElementById('errorState').style.display = 'none';
            document.getElementById('loadingState').style.display = 'block';
            
            setTimeout(() => {
                loadCustomerDetail();
            }, 500);
        }

        // 顧客詳細表示（完全版）
        function displayCustomerDetail() {
            log('🖼️ 顧客詳細表示開始...');
            
            if (!currentCustomer) {
                showError('表示する顧客データがありません');
                return;
            }
            
            try {
                // ローディング状態を隠す
                document.getElementById('loadingState').style.display = 'none';
                document.getElementById('detailContent').style.display = 'block';
                
                // 基本情報表示
                document.getElementById('customerName').textContent = currentCustomer.name || '名前未設定';
                document.getElementById('customerEmail').textContent = currentCustomer.email || '未設定';
                document.getElementById('customerPhone').textContent = currentCustomer.phone || '未設定';
                
                // ステータスバッジ
                const status = currentCustomer.pipelineStatus || currentCustomer.status || '未設定';
                const statusBadge = document.getElementById('statusBadge');
                statusBadge.textContent = status;
                statusBadge.className = `status-badge status-${status}`;
                
                // 日付表示
                const createdAt = currentCustomer.createdAt ? 
                    formatDate(currentCustomer.createdAt) : '未設定';
                const updatedAt = currentCustomer.updatedAt ? 
                    formatDate(currentCustomer.updatedAt) : '未設定';
                document.getElementById('createdAt').textContent = createdAt;
                document.getElementById('updatedAt').textContent = updatedAt;
                
                // 詳細情報
                document.getElementById('customerAge').textContent = 
                    currentCustomer.age ? `${currentCustomer.age}歳` : '未設定';
                document.getElementById('customerOccupation').textContent = 
                    currentCustomer.occupation || '未設定';
                document.getElementById('customerIncome').textContent = 
                    currentCustomer.annualIncome ? `${currentCustomer.annualIncome.toLocaleString()}万円` : '未設定';
                document.getElementById('customerUrgency').textContent = 
                    currentCustomer.urgency || '未設定';
                document.getElementById('customerContactTime').textContent = 
                    currentCustomer.contactTime || '未設定';
                document.getElementById('customerSource').textContent = 
                    currentCustomer.source || '未設定';
                
                // 希望条件
                const preferences = currentCustomer.preferences || {};
                const budgetText = preferences.budgetMin && preferences.budgetMax 
                    ? `${preferences.budgetMin}〜${preferences.budgetMax}万円` 
                    : '未設定';
                document.getElementById('customerBudget').textContent = budgetText;
                document.getElementById('customerRoomType').textContent = preferences.roomType || '未設定';
                document.getElementById('customerAreas').textContent = 
                    preferences.areas ? preferences.areas.join(', ') : '未設定';
                
                // 特別な要望タグ
                const requirementsContainer = document.getElementById('customerRequirements');
                requirementsContainer.innerHTML = '';
                if (preferences.requirements && preferences.requirements.length > 0) {
                    preferences.requirements.forEach(req => {
                        const tag = document.createElement('span');
                        tag.className = 'preference-tag';
                        tag.textContent = req;
                        requirementsContainer.appendChild(tag);
                    });
                } else {
                    requirementsContainer.innerHTML = '<span style="color: #6b7280;">特別な要望はありません</span>';
                }
                
                // メモ表示
                document.getElementById('customerNotes').textContent = 
                    currentCustomer.notes || 'メモはありません';
                
                // ステータス履歴表示
                displayStatusHistory();
                
                log('✅ 顧客詳細表示完了');
                
            } catch (error) {
                console.error('❌ 表示処理エラー:', error);
                showError(`表示処理エラー: ${error.message}`);
            }
        }

        // ステータス変更履歴の表示
        function displayStatusHistory() {
            const historyContainer = document.getElementById('statusHistory');
            historyContainer.innerHTML = '';
            
            // 履歴データの生成
            const history = [
                {
                    date: currentCustomer.createdAt || new Date(),
                    action: `顧客登録 (${currentCustomer.source || '不明'}から)`
                }
            ];
            
            // 現在のステータスも履歴に追加
            const currentStatus = currentCustomer.pipelineStatus || currentCustomer.status;
            if (currentStatus) {
                history.push({
                    date: currentCustomer.updatedAt || new Date(),
                    action: `ステータス: ${currentStatus}`
                });
            }
            
            // 履歴を新しい順にソート
            history.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            // 履歴表示
            history.forEach(item => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                
                const date = formatDate(item.date, true);
                historyItem.innerHTML = `
                    <div class="history-date">${date}</div>
                    <div class="history-action">${item.action}</div>
                `;
                
                historyContainer.appendChild(historyItem);
            });
        }

        // ⭐ ステータス変更処理（復活！）
        function changeStatus() {
            const newStatus = document.getElementById('newStatus').value;
            if (!newStatus) {
                alert('変更するステータスを選択してください');
                return;
            }
            
            if (!confirm(`ステータスを「${newStatus}」に変更してもよろしいですか？`)) {
                return;
            }
            
            try {
                // 顧客データの更新
                currentCustomer.pipelineStatus = newStatus;
                currentCustomer.status = newStatus;
                currentCustomer.updatedAt = new Date().toISOString();
                
                // ローカルストレージの更新
                const possibleKeys = ['rentpipe_demo_customers', 'rentpipe_customers', 'customers'];
                
                for (const key of possibleKeys) {
                    const data = localStorage.getItem(key);
                    if (data) {
                        const customers = JSON.parse(data);
                        const customerIndex = customers.findIndex(c => c.id === customerId);
                        
                        if (customerIndex !== -1) {
                            customers[customerIndex] = currentCustomer;
                            localStorage.setItem(key, JSON.stringify(customers));
                            log(`✅ ステータス更新完了: ${key}`);
                            break;
                        }
                    }
                }
                
                // 画面の再表示
                displayCustomerDetail();
                
                // セレクトボックスをリセット
                document.getElementById('newStatus').value = '';
                
                alert(`✅ ステータスを「${newStatus}」に更新しました！`);
                
            } catch (error) {
                console.error('❌ ステータス更新エラー:', error);
                alert('ステータスの更新に失敗しました');
            }
        }

        // 日付フォーマット
        function formatDate(dateString, includeTime = false) {
            try {
                const date = new Date(dateString);
                if (includeTime) {
                    return date.toLocaleString('ja-JP');
                } else {
                    return date.toLocaleDateString('ja-JP');
                }
            } catch (e) {
                return '日付形式エラー';
            }
        }

        // 顧客編集
        function editCustomer() {
            window.location.href = `customer-form.html?edit=${customerId}`;
        }

        // 顧客エクスポート
        function exportCustomer() {
            if (!currentCustomer) return;
            
            const customerData = JSON.stringify(currentCustomer, null, 2);
            const blob = new Blob([customerData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `顧客_${currentCustomer.name}_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            alert(`${currentCustomer.name}さんのデータをエクスポートしました`);
        }

        // 顧客削除
        function deleteCustomer() {
            if (!currentCustomer) return;
            
            const confirmMessage = `${currentCustomer.name}さんのデータを完全に削除してもよろしいですか？\n\nこの操作は取り消せません。`;
            
            if (!confirm(confirmMessage)) {
                return;
            }
            
            try {
                // データキーの特定
                const possibleKeys = ['rentpipe_demo_customers', 'rentpipe_customers', 'customers'];
                
                for (const key of possibleKeys) {
                    const data = localStorage.getItem(key);
                    if (data) {
                        const customers = JSON.parse(data);
                        const updatedCustomers = customers.filter(c => c.id !== customerId);
                        localStorage.setItem(key, JSON.stringify(updatedCustomers));
                        break;
                    }
                }
                
                alert(`${currentCustomer.name}さんのデータを削除しました`);
                window.location.href = 'customer.html';
                
            } catch (error) {
                console.error('❌ 顧客削除エラー:', error);
                alert('顧客の削除に失敗しました');
            }
        }

        // 戻る処理
        function goBack() {
            if (document.referrer && (document.referrer.includes('pipeline.html') || document.referrer.includes('customer.html'))) {
                history.back();
            } else {
                window.location.href = 'customer.html';
            }
        }
    </script>
    <!-- 緩い認証チェック -->
    <!-- 緩い認証チェック -->
    <!-- 統一認証チェック -->
    <!-- 認証無効化テスト -->
</html>

    <script>
        // 顧客詳細ページ専用：ナビゲーション強制調整
        function forceCustomerNavActive() {
            console.log('🎯 顧客詳細ページ：ナビゲーション強制調整開始');
            
            const navLinks = document.querySelectorAll('.nav-link');
            let foundCustomerLink = false;
            
            navLinks.forEach(link => {
                const href = link.getAttribute('href') || '';
                const text = link.textContent.trim();
                
                // 全てのアクティブをクリア
                link.classList.remove('active');
                
                // 顧客管理リンクを探してアクティブにする
                if (href.includes('customer.html') || text.includes('顧客管理') || text.includes('👥')) {
                    link.classList.add('active');
                    foundCustomerLink = true;
                    console.log(`✅ アクティブ設定完了: ${text}`);
                    
                    // スタイルも強制適用
                    link.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
                    link.style.fontWeight = 'bold';
                }
            });
            
            console.log(`結果: ${foundCustomerLink ? '成功' : '失敗'} (${navLinks.length}個のリンクを確認)`);
            return foundCustomerLink;
        }
        
        // 複数のタイミングで実行
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🔄 DOMContentLoaded: ナビゲーション調整開始');
            
            // 遅延実行で複数回試行
            setTimeout(() => forceCustomerNavActive(), 300);
            setTimeout(() => forceCustomerNavActive(), 600);
            setTimeout(() => forceCustomerNavActive(), 1000);
        });
        
        window.addEventListener('load', () => {
            console.log('🔄 Window Load: ナビゲーション調整実行');
            setTimeout(() => forceCustomerNavActive(), 100);
        });
        
        // ページ表示時にも実行
        setTimeout(() => {
            console.log('🔄 即座実行: ナビゲーション調整');
            forceCustomerNavActive();
        }, 100);
    </script>
